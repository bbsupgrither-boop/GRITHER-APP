#!/usr/bin/env node

const http = require('http');
const fs = require('fs');
const path = require('path');
const url = require('url');

const PORT = 3000;
const MIME_TYPES = {
  '.html': 'text/html; charset=utf-8',
  '.css': 'text/css; charset=utf-8',
  '.js': 'application/javascript; charset=utf-8',
  '.json': 'application/json; charset=utf-8',
  '.png': 'image/png',
  '.jpg': 'image/jpeg',
  '.gif': 'image/gif',
  '.svg': 'image/svg+xml',
  '.ico': 'image/x-icon'
};

function getMimeType(filePath) {
  const ext = path.extname(filePath).toLowerCase();
  return MIME_TYPES[ext] || 'application/octet-stream';
}

function serveFile(filePath, res) {
  fs.readFile(filePath, (err, data) => {
    if (err) {
      res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ' + filePath);
      return;
    }

    const mimeType = getMimeType(filePath);
    res.writeHead(200, { 'Content-Type': mimeType });
    res.end(data);
  });
}

function serveDirectory(dirPath, res) {
  fs.readdir(dirPath, (err, files) => {
    if (err) {
      res.writeHead(500, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏');
      return;
    }

    const htmlFiles = files.filter(file => file.endsWith('.html'));
    
    let html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GRITHER Telegram WebApp - –î–µ–º–æ</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0B0B0C;
            color: #fff;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
        }
        h1 {
            color: #FF5630;
            text-align: center;
            margin-bottom: 30px;
        }
        .file-list {
            display: grid;
            gap: 15px;
        }
        .file-item {
            background: #111216;
            border: 1px solid rgba(255,255,255,.08);
            border-radius: 12px;
            padding: 20px;
            transition: transform .2s ease;
        }
        .file-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0,0,0,.3);
        }
        .file-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #FF6A3A;
        }
        .file-description {
            color: rgba(255,255,255,.64);
            font-size: 14px;
            margin-bottom: 12px;
        }
        .file-link {
            display: inline-block;
            background: linear-gradient(90deg, #FF5630, #FF6A3A);
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            transition: box-shadow .2s ease;
        }
        .file-link:hover {
            box-shadow: 0 0 20px rgba(255,86,48,.4);
        }
        .info {
            background: rgba(20,212,196,.1);
            border: 1px solid rgba(20,212,196,.2);
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            font-size: 14px;
        }
        .warning {
            background: rgba(255,167,38,.1);
            border: 1px solid rgba(255,167,38,.2);
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ GRITHER Telegram WebApp</h1>
        
        <div class="info">
            <strong>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram WebApp. 
            –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Bot —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Web App URL.
        </div>
        
        <div class="file-list">
`;

    const fileDescriptions = {
      'index.html': {
        title: '–û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        description: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ GRITHER —Å hero —Å–µ–∫—Ü–∏–µ–π, –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π, –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏'
      },
      'components.html': {
        title: '–î–µ–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –∫–Ω–æ–ø–∫–∏, –∫–∞—Ä—Ç–æ—á–∫–∏, —Ñ–æ—Ä–º—ã, –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞'
      },
      'telegram-demo.html': {
        title: 'Telegram WebApp Demo',
        description: '–ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram WebApp SDK —Å –ª–æ–≥–æ–º —Å–æ–±—ã—Ç–∏–π'
      }
    };

    htmlFiles.forEach(file => {
      const info = fileDescriptions[file] || { title: file, description: '–§–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' };
      html += `
            <div class="file-item">
                <div class="file-title">${info.title}</div>
                <div class="file-description">${info.description}</div>
                <a href="${file}" class="file-link">–û—Ç–∫—Ä—ã—Ç—å ‚Üí</a>
            </div>
      `;
    });

    html += `
        </div>
        
        <div class="warning">
            <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong> –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram WebApp SDK –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ Telegram Bot, 
            –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –í –±—Ä–∞—É–∑–µ—Ä–µ –º–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.
        </div>
        
        <div class="info">
            <strong>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot:</strong><br>
            1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather<br>
            2. –î–æ–±–∞–≤—å—Ç–µ Web App URL: <code>http://localhost:${PORT}/</code><br>
            3. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Web App
        </div>
    </div>
</body>
</html>
    `;

    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.end(html);
  });
}

const server = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url);
  let pathname = parsedUrl.pathname;

  // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
  if (pathname === '/') {
    serveDirectory(__dirname, res);
    return;
  }

  // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à
  if (pathname.startsWith('/')) {
    pathname = pathname.substring(1);
  }

  const filePath = path.join(__dirname, pathname);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
  if (!filePath.startsWith(__dirname)) {
    res.writeHead(403, { 'Content-Type': 'text/plain; charset=utf-8' });
    res.end('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  fs.stat(filePath, (err, stats) => {
    if (err) {
      res.writeHead(404, { 'Content-Type': 'text/plain; charset=utf-8' });
      res.end('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (stats.isDirectory()) {
      serveDirectory(filePath, res);
    } else {
      serveFile(filePath, res);
    }
  });
});

server.listen(PORT, () => {
  console.log(`üöÄ GRITHER Telegram WebApp —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
  console.log(`ü§ñ –î–ª—è Telegram Bot –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: http://localhost:${PORT}`);
  console.log(`\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:`);
  console.log(`   ‚Ä¢ index.html - –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`);
  console.log(`   ‚Ä¢ components.html - –î–µ–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
  console.log(`   ‚Ä¢ telegram-demo.html - Telegram WebApp Demo`);
  console.log(`\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
  console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});
