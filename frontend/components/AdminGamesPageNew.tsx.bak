РїВ»С—import { useState } from 'react';
import { Plus, Eye, Edit, Trash2, Play, Pause, Archive, Copy, Check, ChevronLeft, ChevronRight, Home, Users, Zap, Trophy, CheckSquare, ShoppingBag, Gamepad2, Box, CircleDot, Scissors, DollarSign, X, Settings } from './Icons';
import { Dialog, DialogContent, DialogTitle, DialogDescription } from './ui/dialog';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Game, GameType, GameStatus, GameWizardState, WheelSector, RPSConfig, SlotsConfig, SlotSymbol, SlotCombination, GameReward, RewardType } from '../types/games';

interface AdminGamesPageNewProps {
  onBack: () => void;
  onNavigateToSection: (section: string) => void;
}

export function AdminGamesPageNew({ onBack, onNavigateToSection }: AdminGamesPageNewProps) {
  // Р В РЎСљР В Р’В°Р В Р вЂ Р В РЎвЂР В РЎвЂ“Р В Р’В°Р РЋРІР‚В Р В РЎвЂР В РЎвЂўР В Р вЂ¦Р В Р вЂ¦Р РЋРІР‚в„–Р В Р’Вµ Р РЋР РЉР В Р’В»Р В Р’ВµР В РЎВР В Р’ВµР В Р вЂ¦Р РЋРІР‚С™Р РЋРІР‚в„– Р В РЎвЂ”Р В Р’В°Р В Р вЂ¦Р В Р’ВµР В Р’В»Р В РЎвЂ Р В Р’В°Р В РўвЂР В РЎВР В РЎвЂР В Р вЂ¦Р В РЎвЂР РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В Р’В°Р РЋРІР‚С™Р В РЎвЂўР РЋР вЂљР В Р’В°
  const navigationItems = [
    { icon: Home, label: 'Р В РІР‚СљР В Р’В»Р В Р’В°Р В Р вЂ Р В Р вЂ¦Р В Р’В°Р РЋР РЏ', section: 'dashboard' },
    { icon: Users, label: 'Р В РІР‚в„ўР В РЎвЂўР РЋР вЂљР В РЎвЂќР В Р’ВµР РЋР вЂљР РЋРІР‚в„–', section: 'workers' },
    { icon: Zap, label: 'Р В РІР‚ВР В Р’В°Р РЋРІР‚С™Р РЋРІР‚С™Р В Р’В»Р РЋРІР‚в„–', section: 'battles' },
    { icon: Trophy, label: 'Р В РІР‚СњР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р В РЎвЂР В Р’В¶Р В Р’ВµР В Р вЂ¦Р В РЎвЂР РЋР РЏ', section: 'achievements' },
    { icon: CheckSquare, label: 'Р В РІР‚вЂќР В Р’В°Р В РўвЂР В Р’В°Р РЋРІР‚РЋР В РЎвЂ', section: 'tasks' },
    { icon: ShoppingBag, label: 'Р В РЎС›Р В РЎвЂўР В Р вЂ Р В Р’В°Р РЋР вЂљР РЋРІР‚в„–', section: 'shop' },
    { icon: Gamepad2, label: 'Р В Р’ВР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–', section: 'games' },
    { icon: Box, label: 'Р В РЎв„ўР В Р’ВµР В РІвЂћвЂ“Р РЋР С“Р РЋРІР‚в„–', section: 'cases' }
  ];

  // Р В РІР‚СњР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р В Р’В»Р РЋР РЏР В Р’ВµР В РЎВ Р РЋРІР‚С™Р В Р’ВµР РЋР С“Р РЋРІР‚С™Р В РЎвЂўР В Р вЂ Р РЋРЎвЂњР РЋР вЂ№ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРЎвЂњ Р В РўвЂР В Р’В»Р РЋР РЏ Р В РўвЂР В Р’ВµР В РЎВР В РЎвЂўР В Р вЂ¦Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В Р’В°Р РЋРІР‚В Р В РЎвЂР В РЎвЂ  
  const [games, setGames] = useState<Game[]>([
    {
      id: '1',
      name: 'Р В РЎСџР В РЎСџР В РЎСџ',
      description: 'Р В РЎв„ўР В РЎвЂўР В Р’В»Р В Р’ВµР РЋР С“Р В РЎвЂў Р РЋРІР‚С›Р В РЎвЂўР РЋР вЂљР РЋРІР‚С™Р РЋРЎвЂњР В Р вЂ¦Р РЋРІР‚в„– Р Р†Р вЂљРЎС› Р В РЎв„ўР РЋРЎвЂњР В Р’В»Р В РўвЂР В Р’В°Р РЋРЎвЂњР В Р вЂ¦ 300Р РЋР С“',
      type: 'wheel',
      status: 'draft',
      icon: 'РЎР‚РЎСџР вЂ№Р’В®',
      config: {
        sectors: [],
        spinAnimationMs: 3000
      },
      rewards: [],
      access: {
        visibility: 'public',
        cooldownSeconds: 300
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      stats: {
        totalPlays: 0,
        totalRewards: 0,
        uniquePlayers: 0
      }
    }
  ]);
  const [isWizardOpen, setIsWizardOpen] = useState(false);
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [selectedGame, setSelectedGame] = useState<Game | null>(null);
  const [copiedJson, setCopiedJson] = useState(false);

  // Р В Р Р‹Р В РЎвЂўР РЋР С“Р РЋРІР‚С™Р В РЎвЂўР РЋР РЏР В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎВР В Р’В°Р РЋР С“Р РЋРІР‚С™Р В Р’ВµР РЋР вЂљР В Р’В° Р РЋР С“Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋР РЏ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–
  const [wizardState, setWizardState] = useState<GameWizardState>({
    currentStep: 0,
    steps: [
      { id: 'type', title: 'Р В РЎС›Р В РЎвЂР В РЎвЂ” Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–', description: 'Р В РІР‚в„ўР РЋРІР‚в„–Р В Р’В±Р В Р’ВµР РЋР вЂљР В РЎвЂР РЋРІР‚С™Р В Р’Вµ Р РЋРІР‚С™Р В РЎвЂР В РЎвЂ” Р В РЎВР В РЎвЂР В Р вЂ¦Р В РЎвЂ-Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–', isComplete: false },
      { id: 'basic', title: 'Р В РЎвЂєР РЋР С“Р В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В Р вЂ¦Р В РЎвЂўР В Р’Вµ', description: 'Р В РЎСљР В Р’В°Р В Р’В·Р В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ, Р В РЎвЂўР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ, Р В РЎвЂР В РЎвЂќР В РЎвЂўР В Р вЂ¦Р В РЎвЂќР В Р’В°', isComplete: false },
      { id: 'config', title: 'Р В РЎСџР В Р’В°Р РЋР вЂљР В Р’В°Р В РЎВР В Р’ВµР РЋРІР‚С™Р РЋР вЂљР РЋРІР‚в„–', description: 'Р В РЎСљР В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–', isComplete: false },
      { id: 'rewards', title: 'Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–', description: 'Р В Р Р‹Р В РЎвЂР РЋР С“Р РЋРІР‚С™Р В Р’ВµР В РЎВР В Р’В° Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂ', isComplete: false },
      { id: 'access', title: 'Р В РІР‚СњР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”', description: 'Р В РІР‚в„ўР В РЎвЂР В РўвЂР В РЎвЂР В РЎВР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂ Р В РЎвЂќР РЋРЎвЂњР В Р’В»Р В РўвЂР В Р’В°Р РЋРЎвЂњР В Р вЂ¦', isComplete: false },
      { id: 'preview', title: 'Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ', description: 'Р В РЎСџР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’ВµР РЋР вЂљР В РЎвЂќР В Р’В° Р В РЎвЂР С—РЎвЂ”Р вЂ¦Р С—РЎвЂ”Р вЂ¦Р РЋР вЂљР РЋРІР‚в„–', isComplete: false },
      { id: 'publish', title: 'Р В РЎСџР РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏ', description: 'Р В Р Р‹Р В РЎвЂўР РЋРІР‚В¦Р РЋР вЂљР В Р’В°Р В Р вЂ¦Р В Р’ВµР В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–', isComplete: false }
    ],
    gameData: {
      type: undefined,
      status: 'draft',
      access: {
        visibility: 'public',
        cooldownSeconds: 300
      },
      rewards: []
    }
  });

  const gameTypes = [
    { 
      id: 'wheel' as GameType, 
      name: 'Р В РЎв„ўР В РЎвЂўР В Р’В»Р В Р’ВµР РЋР С“Р В РЎвЂў Р РЋРІР‚С›Р В РЎвЂўР РЋР вЂљР РЋРІР‚С™Р РЋРЎвЂњР В Р вЂ¦Р РЋРІР‚в„–', 
      icon: CircleDot,
      description: 'Р В РЎв„ўР РЋР вЂљР РЋРЎвЂњР РЋРІР‚С™Р В РЎвЂР РЋРІР‚С™Р В Р’Вµ Р В РЎвЂќР В РЎвЂўР В Р’В»Р В Р’ВµР РЋР С“Р В РЎвЂў Р В РЎвЂ Р В РЎвЂ”Р В РЎвЂўР В Р’В»Р РЋРЎвЂњР РЋРІР‚РЋР В Р’В°Р В РІвЂћвЂ“Р РЋРІР‚С™Р В Р’Вµ Р РЋР С“Р В Р’В»Р РЋРЎвЂњР РЋРІР‚РЋР В Р’В°Р В РІвЂћвЂ“Р В Р вЂ¦Р РЋРІР‚в„–Р В Р’Вµ Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–'
    },
    { 
      id: 'rps' as GameType, 
      name: 'Р В РЎв„ўР В Р’В°Р В РЎВР В Р’ВµР В Р вЂ¦Р РЋР Р‰, Р В Р вЂ¦Р В РЎвЂўР В Р’В¶Р В Р вЂ¦Р В РЎвЂР РЋРІР‚В Р РЋРІР‚в„–, Р В Р’В±Р РЋРЎвЂњР В РЎВР В Р’В°Р В РЎвЂ“Р В Р’В°', 
      icon: Scissors,
      description: 'Р В РЎв„ўР В Р’В»Р В Р’В°Р РЋР С“Р РЋР С“Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР РЋР С“Р В РЎвЂќР В Р’В°Р РЋР РЏ Р С—РЎвЂ”Р вЂ¦Р С—РЎвЂ”Р вЂ¦Р В РЎвЂ“Р РЋР вЂљР В Р’В° Р В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋРІР‚С™Р В РЎвЂР В Р вЂ  Р В Р’В±Р В РЎвЂўР РЋРІР‚С™Р В Р’В° Р В РЎвЂР В Р’В»Р В РЎвЂ Р В РўвЂР РЋР вЂљР РЋРЎвЂњР В РЎвЂ“Р В РЎвЂР РЋРІР‚В¦ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В РЎвЂўР В РЎвЂќР В РЎвЂўР В Р вЂ '
    },
    { 
      id: 'slots' as GameType, 
      name: 'Р В Р Р‹Р В Р’В»Р В РЎвЂўР РЋРІР‚С™Р РЋРІР‚в„–', 
      icon: DollarSign,
      description: 'Р В РЎвЂ™Р В Р вЂ Р РЋРІР‚С™Р В РЎвЂўР В РЎВР В Р’В°Р РЋРІР‚С™ Р РЋР С“ Р В Р’В±Р В Р’В°Р РЋР вЂљР В Р’В°Р В Р’В±Р В Р’В°Р В Р вЂ¦Р В Р’В°Р В РЎВР В РЎвЂ Р В РЎвЂ Р В РЎвЂќР В РЎвЂўР В РЎВР В Р’В±Р В РЎвЂР В Р вЂ¦Р В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏР В РЎВР В РЎвЂ Р РЋР С“Р В РЎвЂР В РЎВР В Р вЂ Р В РЎвЂўР В Р’В»Р В РЎвЂўР В Р вЂ '
    }
  ];

  const rewardTypes = [
    { id: 'xp' as RewardType, name: 'Р В РЎвЂєР В РЎвЂ”Р РЋРІР‚в„–Р РЋРІР‚С™ (XP)', icon: 'Р Р†Р’В­РЎвЂ™' },
    { id: 'currency' as RewardType, name: 'Р В РІР‚в„ўР В Р’В°Р В Р’В»Р РЋР вЂ№Р РЋРІР‚С™Р В Р’В°', icon: 'РЎР‚РЎСџРІР‚в„ўР’В°' },
    { id: 'loot' as RewardType, name: 'Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎВР В Р’ВµР РЋРІР‚С™', icon: 'РЎР‚РЎСџР вЂ№Р С“' },
    { id: 'none' as RewardType, name: 'Р В РІР‚ВР В Р’ВµР В Р’В· Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–', icon: 'Р Р†РЎСљР Р‰' }
  ];

  const resetWizard = () => {
    setWizardState({
      currentStep: 0,
      steps: wizardState.steps.map(s => ({ ...s, isComplete: false })),
      gameData: {
        type: undefined,
        status: 'draft',
        access: {
          visibility: 'public',
          cooldownSeconds: 300
        },
        rewards: []
      }
    });
  };

  const updateWizardData = (data: Partial<Game>) => {
    setWizardState(prev => ({
      ...prev,
      gameData: { ...prev.gameData, ...data }
    }));
  };

  const completeStep = (stepIndex: number) => {
    setWizardState(prev => ({
      ...prev,
      steps: prev.steps.map((step, index) => 
        index === stepIndex ? { ...step, isComplete: true } : step
      )
    }));
  };

  const nextStep = () => {
    if (wizardState.currentStep < wizardState.steps.length - 1) {
      completeStep(wizardState.currentStep);
      setWizardState(prev => ({
        ...prev,
        currentStep: prev.currentStep + 1
      }));
    }
  };

  const prevStep = () => {
    if (wizardState.currentStep > 0) {
      setWizardState(prev => ({
        ...prev,
        currentStep: prev.currentStep - 1
      }));
    }
  };

  const handleGameStatusChange = (gameId: string, newStatus: GameStatus) => {
    setGames(prev => prev.map(game => 
      game.id === gameId 
        ? { 
            ...game, 
            status: newStatus,
            updatedAt: new Date().toISOString(),
            publishedAt: newStatus === 'published' ? new Date().toISOString() : game.publishedAt
          }
        : game
    ));
  };

  const handleDeleteGame = (gameId: string) => {
    setGames(prev => prev.filter(game => game.id !== gameId));
  };

  const copyGameJson = (game: Game) => {
    const json = JSON.stringify(game, null, 2);
    navigator.clipboard.writeText(json);
    setCopiedJson(true);
    setTimeout(() => setCopiedJson(false), 2000);
  };

  const createGame = () => {
    if (!wizardState.gameData.name || !wizardState.gameData.type) return;

    const newGame: Game = {
      id: Date.now().toString(),
      name: wizardState.gameData.name,
      description: wizardState.gameData.description || '',
      type: wizardState.gameData.type,
      status: wizardState.gameData.status || 'draft',
      icon: wizardState.gameData.icon,
      config: wizardState.gameData.config || getDefaultConfig(wizardState.gameData.type),
      rewards: wizardState.gameData.rewards || [],
      access: wizardState.gameData.access || { visibility: 'public', cooldownSeconds: 300 },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      publishedAt: wizardState.gameData.status === 'published' ? new Date().toISOString() : undefined,
      stats: {
        totalPlays: 0,
        totalRewards: 0,
        uniquePlayers: 0
      }
    };

    setGames(prev => [...prev, newGame]);
    setIsWizardOpen(false);
    resetWizard();
  };

  const getDefaultConfig = (type: GameType) => {
    switch (type) {
      case 'wheel':
        return {
          sectors: [
            { label: '10 XP', weight: 40, rewardType: 'xp' as RewardType, rewardValue: 10 },
            { label: '50 Р В РЎВР В РЎвЂўР В Р вЂ¦Р В Р’ВµР РЋРІР‚С™', weight: 30, rewardType: 'currency' as RewardType, rewardValue: 50 },
            { label: '100 Р В РЎВР В РЎвЂўР В Р вЂ¦Р В Р’ВµР РЋРІР‚С™', weight: 20, rewardType: 'currency' as RewardType, rewardValue: 100 },
            { label: 'Р В РЎСџР РЋРЎвЂњР РЋР С“Р РЋРІР‚С™Р В РЎвЂў', weight: 10, rewardType: 'none' as RewardType, rewardValue: 0 }
          ],
          spinAnimationMs: 3000
        };
      case 'rps':
        return {
          mode: 'pve' as const,
          rounds: 1,
          winReward: { type: 'currency' as RewardType, value: 50 },
          drawReward: { type: 'currency' as RewardType, value: 10 }
        };
      case 'slots':
        return {
          reels: 3,
          symbols: [
            { id: 'cherry', label: 'Р В РІР‚в„ўР В РЎвЂР РЋРІвЂљВ¬Р В Р вЂ¦Р РЋР РЏ', icon: 'РЎР‚РЎСџР РЉРІР‚в„ў', rarity: 1 },
            { id: 'lemon', label: 'Р В РІР‚С”Р В РЎвЂР В РЎВР В РЎвЂўР В Р вЂ¦', icon: 'РЎР‚РЎСџР РЉРІР‚в„–', rarity: 1 },
            { id: 'grape', label: 'Р В РІР‚в„ўР В РЎвЂР В Р вЂ¦Р В РЎвЂўР В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂ', icon: 'РЎР‚РЎСџР РЉРІР‚РЋ', rarity: 2 },
            { id: 'bell', label: 'Р В РЎв„ўР В РЎвЂўР В Р’В»Р В РЎвЂўР В РЎвЂќР В РЎвЂўР В Р’В»', icon: 'РЎР‚РЎСџРІР‚СњРІР‚Сњ', rarity: 3 },
            { id: 'star', label: 'Р В РІР‚вЂќР В Р вЂ Р В Р’ВµР В Р’В·Р В РўвЂР В Р’В°', icon: 'Р Р†Р’В­РЎвЂ™', rarity: 5 }
          ],
          combinations: [
            { pattern: ['cherry', 'cherry', 'cherry'], multiplier: 10, description: 'Р В РЎС›Р РЋР вЂљР В РЎвЂ Р В Р вЂ Р В РЎвЂР РЋРІвЂљВ¬Р В Р вЂ¦Р В РЎвЂ' },
            { pattern: ['star', 'star', 'star'], multiplier: 100, description: 'Р В РЎС›Р РЋР вЂљР В РЎвЂ Р В Р’В·Р В Р вЂ Р В Р’ВµР В Р’В·Р В РўвЂР РЋРІР‚в„–' }
          ],
          spinDurationMs: 2000
        };
      default:
        return {};
    }
  };

  const renderWizardStep = () => {
    const currentStepData = wizardState.steps[wizardState.currentStep];
    
    switch (currentStepData.id) {
      case 'type':
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-lg font-medium text-foreground mb-2">Р В РІР‚в„ўР РЋРІР‚в„–Р В Р’В±Р В Р’ВµР РЋР вЂљР В РЎвЂР РЋРІР‚С™Р В Р’Вµ Р РЋРІР‚С™Р В РЎвЂР В РЎвЂ” Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</h3>
              <p className="text-sm text-muted-foreground">Р В РЎв„ўР В Р’В°Р В Р’В¶Р В РўвЂР РЋРІР‚в„–Р В РІвЂћвЂ“ Р РЋРІР‚С™Р В РЎвЂР В РЎвЂ” Р В РЎвЂР В РЎВР В Р’ВµР В Р’ВµР РЋРІР‚С™ Р РЋР С“Р В Р вЂ Р В РЎвЂўР В РЎвЂ Р В РЎвЂўР РЋР С“Р В РЎвЂўР В Р’В±Р В Р’ВµР В Р вЂ¦Р В Р вЂ¦Р В РЎвЂўР РЋР С“Р РЋРІР‚С™Р В РЎвЂ Р В РЎвЂ Р В Р вЂ¦Р В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ</p>
            </div>
            <div className="grid gap-4">
              {gameTypes.map((type) => {
                const Icon = type.icon;
                const isSelected = wizardState.gameData.type === type.id;
                return (
                  <button
                    key={type.id}
                    onClick={() => updateWizardData({ type: type.id })}
                    className={`p-4 rounded-2xl text-left transition-all ${
                      isSelected 
                        ? 'bg-primary text-primary-foreground' 
                        : 'glass-card hover:scale-[0.98]'
                    }`}
                  >
                    <div className="flex items-start gap-4">
                      <div className={`w-12 h-12 rounded-xl flex items-center justify-center ${
                        isSelected ? 'bg-white/20' : 'bg-secondary'
                      }`}>
                        <Icon className="w-6 h-6" />
                      </div>
                      <div className="flex-1">
                        <div className="font-medium mb-1">{type.name}</div>
                        <div className={`text-sm ${isSelected ? 'opacity-90' : 'text-muted-foreground'}`}>
                          {type.description}
                        </div>
                      </div>
                    </div>
                  </button>
                );
              })}
            </div>
          </div>
        );

      case 'basic':
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎвЂєР РЋР С“Р В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В Р вЂ¦Р В Р’В°Р РЋР РЏ Р В РЎвЂР В Р вЂ¦Р РЋРІР‚С›Р В РЎвЂўР РЋР вЂљР В РЎВР В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏ</h3>
              <p className="text-sm text-muted-foreground">Р В РЎСљР В Р’В°Р В Р’В·Р В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂ Р В РЎвЂўР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</p>
            </div>
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium text-foreground mb-2 block">
                  Р В РЎСљР В Р’В°Р В Р’В·Р В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„– *
                </label>
                <Input
                  value={wizardState.gameData.name || ''}
                  onChange={(e) => updateWizardData({ name: e.target.value })}
                  placeholder="Р В РІР‚в„ўР В Р вЂ Р В Р’ВµР В РўвЂР В РЎвЂР РЋРІР‚С™Р В Р’Вµ Р В Р вЂ¦Р В Р’В°Р В Р’В·Р В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–"
                  className="glass-card"
                />
              </div>
              <div>
                <label className="text-sm font-medium text-foreground mb-2 block">
                  Р В РЎвЂєР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ
                </label>
                <Textarea
                  value={wizardState.gameData.description || ''}
                  onChange={(e) => updateWizardData({ description: e.target.value })}
                  placeholder="Р В РЎв„ўР РЋР вЂљР В Р’В°Р РЋРІР‚С™Р В РЎвЂќР В РЎвЂўР В Р’Вµ Р В РЎвЂўР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–"
                  className="glass-card resize-none"
                  rows={3}
                />
              </div>
              <div>
                <label className="text-sm font-medium text-foreground mb-2 block">
                  Р В Р’ВР В РЎвЂќР В РЎвЂўР В Р вЂ¦Р В РЎвЂќР В Р’В° (emoji)
                </label>
                <Input
                  value={wizardState.gameData.icon || ''}
                  onChange={(e) => updateWizardData({ icon: e.target.value })}
                  placeholder="РЎР‚РЎСџР вЂ№Р’В®"
                  className="glass-card"
                  maxLength={2}
                />
              </div>
            </div>
          </div>
        );

      case 'config':
        return renderGameConfigStep();

      case 'rewards':
        return renderRewardsStep();

      case 'access':
        return renderAccessStep();

      case 'preview':
        return renderPreviewStep();

      case 'publish':
        return renderPublishStep();

      default:
        return (
          <div className="text-center py-8">
            <div className="text-muted-foreground">
              Р В Р РѓР В Р’В°Р В РЎвЂ“ "{currentStepData.title}" Р В Р вЂ  Р РЋР вЂљР В Р’В°Р В Р’В·Р РЋР вЂљР В Р’В°Р В Р’В±Р В РЎвЂўР РЋРІР‚С™Р В РЎвЂќР В Р’Вµ
            </div>
          </div>
        );
    }
  };

  const canProceedToNext = () => {
    const currentStepData = wizardState.steps[wizardState.currentStep];
    
    switch (currentStepData.id) {
      case 'type':
        return !!wizardState.gameData.type;
      case 'basic':
        return !!wizardState.gameData.name?.trim();
      case 'config':
        return !!wizardState.gameData.config;
      case 'rewards':
        return true; // Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„– Р В Р вЂ¦Р В Р’Вµ Р В РЎвЂўР В Р’В±Р РЋР РЏР В Р’В·Р В Р’В°Р РЋРІР‚С™Р В Р’ВµР В Р’В»Р РЋР Р‰Р В Р вЂ¦Р РЋРІР‚в„–
      case 'access':
        return !!wizardState.gameData.access?.cooldownSeconds;
      case 'preview':
        return true;
      case 'publish':
        return !!wizardState.gameData.status;
      default:
        return true;
    }
  };

  const getStatusColor = (status: GameStatus) => {
    switch (status) {
      case 'published': return 'text-green-600';
      case 'draft': return 'text-orange-500';
      case 'archived': return 'text-muted-foreground';
      default: return 'text-foreground';
    }
  };

  const getStatusLabel = (status: GameStatus) => {
    switch (status) {
      case 'published': return 'Р В РЎвЂєР В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В РЎвЂўР В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂў';
      case 'draft': return 'Р В Р’В§Р В Р’ВµР РЋР вЂљР В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В РЎвЂР В РЎвЂќ';
      case 'archived': return 'Р В РЎвЂ™Р РЋР вЂљР РЋРІР‚В¦Р В РЎвЂР В Р вЂ ';
      default: return status;
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const renderGameConfigStep = () => {
    const gameType = wizardState.gameData.type;
    
    if (!gameType) return <div>Р В Р Р‹Р В Р вЂ¦Р В Р’В°Р РЋРІР‚РЋР В Р’В°Р В Р’В»Р В Р’В° Р В Р вЂ Р РЋРІР‚в„–Р В Р’В±Р В Р’ВµР РЋР вЂљР В РЎвЂР РЋРІР‚С™Р В Р’Вµ Р РЋРІР‚С™Р В РЎвЂР В РЎвЂ” Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</div>;

    switch (gameType) {
      case 'wheel':
        return renderWheelConfig();
      case 'rps':
        return renderRPSConfig();
      case 'slots':
        return renderSlotsConfig();
      default:
        return <div>Р В РЎСљР В Р’ВµР В РЎвЂР В Р’В·Р В Р вЂ Р В Р’ВµР РЋР С“Р РЋРІР‚С™Р В Р вЂ¦Р РЋРІР‚в„–Р В РІвЂћвЂ“ Р РЋРІР‚С™Р В РЎвЂР В РЎвЂ” Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</div>;
    }
  };

  const renderWheelConfig = () => {
    const config = wizardState.gameData.config as WheelConfig || { sectors: [], spinAnimationMs: 3000 };
    
    const updateWheelConfig = (newConfig: Partial<WheelConfig>) => {
      updateWizardData({ config: { ...config, ...newConfig } });
    };
    
    const addSector = () => {
      const newSector: WheelSector = {
        label: 'Р В РЎСљР В РЎвЂўР В Р вЂ Р РЋРІР‚в„–Р В РІвЂћвЂ“ Р РЋР С“Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљ',
        weight: 10,
        rewardType: 'none',
        rewardValue: 0
      };
      updateWheelConfig({ sectors: [...config.sectors, newSector] });
    };
    
    const updateSector = (index: number, sector: Partial<WheelSector>) => {
      const newSectors = [...config.sectors];
      newSectors[index] = { ...newSectors[index], ...sector };
      updateWheelConfig({ sectors: newSectors });
    };
    
    const removeSector = (index: number) => {
      updateWheelConfig({ sectors: config.sectors.filter((_, i) => i !== index) });
    };

    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎСљР В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р В РЎвЂќР В РЎвЂўР В Р’В»Р В Р’ВµР РЋР С“Р В Р’В° Р РЋРІР‚С›Р В РЎвЂўР РЋР вЂљР РЋРІР‚С™Р РЋРЎвЂњР В Р вЂ¦Р РЋРІР‚в„–</h3>
          <p className="text-sm text-muted-foreground">Р В РІР‚СњР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р РЋР Р‰Р РЋРІР‚С™Р В Р’Вµ Р РЋР С“Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљР РЋРІР‚в„– Р В РЎвЂ Р В Р вЂ¦Р В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р РЋРІР‚С™Р В Р’Вµ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В РЎВР В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР вЂ№</p>
        </div>
        
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium text-foreground mb-2 block">
              Р В РІР‚в„ўР РЋР вЂљР В Р’ВµР В РЎВР РЋР РЏ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В РЎВР В Р’В°Р РЋРІР‚В Р В РЎвЂР В РЎвЂ (Р В РЎВР РЋР С“)
            </label>
            <Input
              type="number"
              value={config.spinAnimationMs}
              onChange={(e) => updateWheelConfig({ spinAnimationMs: parseInt(e.target.value) || 3000 })}
              className="glass-card"
              min="1000"
              max="10000"
            />
          </div>
          
          <div className="flex items-center justify-between">
            <label className="text-sm font-medium text-foreground">Р В Р Р‹Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљР РЋРІР‚в„– Р В РЎвЂќР В РЎвЂўР В Р’В»Р В Р’ВµР РЋР С“Р В Р’В°</label>
            <button
              onClick={addSector}
              className="flex items-center gap-2 bg-primary text-primary-foreground px-3 py-2 rounded-lg hover:scale-[0.98] transition-transform text-sm"
            >
              <Plus className="w-4 h-4" />
              Р В РІР‚СњР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р В РЎвЂР РЋРІР‚С™Р РЋР Р‰ Р РЋР С“Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљ
            </button>
          </div>
          
          <div className="space-y-3 max-h-60 overflow-y-auto">
            {config.sectors.map((sector, index) => (
              <div key={index} className="glass-card rounded-xl p-4">
                <div className="flex items-center justify-between mb-3">
                  <span className="text-sm font-medium text-foreground">Р В Р Р‹Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљ {index + 1}</span>
                  <button
                    onClick={() => removeSector(index)}
                    className="p-1 hover:bg-red-100 rounded transition-colors"
                  >
                    <X className="w-4 h-4 text-red-500" />
                  </button>
                </div>
                
                <div className="grid grid-cols-2 gap-3">
                  <div>
                    <label className="text-xs text-muted-foreground mb-1 block">Р В РЎСљР В Р’В°Р В Р’В·Р В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ</label>
                    <Input
                      value={sector.label}
                      onChange={(e) => updateSector(index, { label: e.target.value })}
                      className="glass-card text-sm"
                      placeholder="Р В РЎСљР В Р’В°Р В Р’В·Р В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р РЋР С“Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљР В Р’В°"
                    />
                  </div>
                  <div>
                    <label className="text-xs text-muted-foreground mb-1 block">Р В РІР‚в„ўР В Р’ВµР РЋР С“ (%)</label>
                    <Input
                      type="number"
                      value={sector.weight}
                      onChange={(e) => updateSector(index, { weight: parseInt(e.target.value) || 0 })}
                      className="glass-card text-sm"
                      min="0"
                      max="100"
                    />
                  </div>
                  <div>
                    <label className="text-xs text-muted-foreground mb-1 block">Р В РЎС›Р В РЎвЂР В РЎвЂ” Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–</label>
                    <Select
                      value={sector.rewardType}
                      onValueChange={(value: RewardType) => updateSector(index, { rewardType: value })}
                    >
                      <SelectTrigger className="glass-card text-sm">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {rewardTypes.map(type => (
                          <SelectItem key={type.id} value={type.id}>
                            {type.icon} {type.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <label className="text-xs text-muted-foreground mb-1 block">Р В РЎв„ўР В РЎвЂўР В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂў</label>
                    <Input
                      type="number"
                      value={sector.rewardValue}
                      onChange={(e) => updateSector(index, { rewardValue: parseInt(e.target.value) || 0 })}
                      className="glass-card text-sm"
                      min="0"
                      disabled={sector.rewardType === 'none'}
                    />
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {config.sectors.length === 0 && (
            <div className="text-center py-8 text-muted-foreground">
              Р В РІР‚СњР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р РЋР Р‰Р РЋРІР‚С™Р В Р’Вµ Р РЋР С“Р В Р’ВµР В РЎвЂќР РЋРІР‚С™Р В РЎвЂўР РЋР вЂљР РЋРІР‚в„– Р В РўвЂР В Р’В»Р РЋР РЏ Р В РЎвЂќР В РЎвЂўР В Р’В»Р В Р’ВµР РЋР С“Р В Р’В°
            </div>
          )}
        </div>
      </div>
    );
  };

  const renderRPSConfig = () => {
    const config = wizardState.gameData.config as RPSConfig || {
      mode: 'pve',
      rounds: 1,
      winReward: { type: 'currency', value: 50 }
    };
    
    const updateRPSConfig = (newConfig: Partial<RPSConfig>) => {
      updateWizardData({ config: { ...config, ...newConfig } });
    };

    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎСљР В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р В РЎвЂќР В Р’В°Р В РЎВР В Р’ВµР В Р вЂ¦Р РЋР Р‰-Р В Р вЂ¦Р В РЎвЂўР В Р’В¶Р В Р вЂ¦Р В РЎвЂР РЋРІР‚В Р РЋРІР‚в„–-Р В Р’В±Р РЋРЎвЂњР В РЎВР В Р’В°Р В РЎвЂ“Р В Р’В°</h3>
          <p className="text-sm text-muted-foreground">Р В Р’В Р В Р’ВµР В Р’В¶Р В РЎвЂР В РЎВ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„– Р В РЎвЂ Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–</p>
        </div>
        
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium text-foreground mb-2 block">Р В Р’В Р В Р’ВµР В Р’В¶Р В РЎвЂР В РЎВ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</label>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => updateRPSConfig({ mode: 'pve' })}
                className={`p-3 rounded-xl text-left transition-all ${
                  config.mode === 'pve' ? 'bg-primary text-primary-foreground' : 'glass-card'
                }`}
              >
                <div className="font-medium">Р В РЎСџР РЋР вЂљР В РЎвЂўР РЋРІР‚С™Р В РЎвЂР В Р вЂ  Р В Р’В±Р В РЎвЂўР РЋРІР‚С™Р В Р’В° (PvE)</div>
                <div className={`text-sm ${config.mode === 'pve' ? 'opacity-90' : 'text-muted-foreground'}`}>
                  Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋРІР‚С™Р В РЎвЂР В Р вЂ  Р В РЎвЂќР В РЎвЂўР В РЎВР В РЎвЂ”Р РЋР Р‰Р РЋР вЂ№Р РЋРІР‚С™Р В Р’ВµР РЋР вЂљР В Р’В°
                </div>
              </button>
              <button
                onClick={() => updateRPSConfig({ mode: 'pvp' })} 
                className={`p-3 rounded-xl text-left transition-all ${
                  config.mode === 'pvp' ? 'bg-primary text-primary-foreground' : 'glass-card'
                }`}
              >
                <div className="font-medium">Р В РЎСџР РЋР вЂљР В РЎвЂўР РЋРІР‚С™Р В РЎвЂР В Р вЂ  Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В РЎвЂўР В РЎвЂќР В Р’В° (PvP)</div>
                <div className={`text-sm ${config.mode === 'pvp' ? 'opacity-90' : 'text-muted-foreground'}`}>
                  Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋРІР‚С™Р В РЎвЂР В Р вЂ  Р В РўвЂР РЋР вЂљР РЋРЎвЂњР В РЎвЂ“Р В РЎвЂР РЋРІР‚В¦ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В РЎвЂўР В РЎвЂќР В РЎвЂўР В Р вЂ 
                </div>
              </button>
            </div>
          </div>
          
          <div>
            <label className="text-sm font-medium text-foreground mb-2 block">Р В РЎв„ўР В РЎвЂўР В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂў Р РЋР вЂљР В Р’В°Р РЋРЎвЂњР В Р вЂ¦Р В РўвЂР В РЎвЂўР В Р вЂ </label>
            <Input
              type="number"
              value={config.rounds}
              onChange={(e) => updateRPSConfig({ rounds: parseInt(e.target.value) || 1 })}
              className="glass-card"
              min="1"
              max="10"
            />
          </div>
          
          <div className="glass-card rounded-xl p-4">
            <h4 className="font-medium text-foreground mb-3">Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР В Р’В° Р В Р’В·Р В Р’В° Р В РЎвЂ”Р В РЎвЂўР В Р’В±Р В Р’ВµР В РўвЂР РЋРЎвЂњ</h4>
            <div className="grid grid-cols-2 gap-3">
              <div>
                <label className="text-xs text-muted-foreground mb-1 block">Р В РЎС›Р В РЎвЂР В РЎвЂ” Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–</label>
                <Select
                  value={config.winReward.type}
                  onValueChange={(value: RewardType) => 
                    updateRPSConfig({ winReward: { ...config.winReward, type: value } })
                  }
                >
                  <SelectTrigger className="glass-card text-sm">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {rewardTypes.filter(t => t.id !== 'none').map(type => (
                      <SelectItem key={type.id} value={type.id}>
                        {type.icon} {type.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <label className="text-xs text-muted-foreground mb-1 block">Р В РЎв„ўР В РЎвЂўР В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂў</label>
                <Input
                  type="number"
                  value={config.winReward.value}
                  onChange={(e) => 
                    updateRPSConfig({ winReward: { ...config.winReward, value: parseInt(e.target.value) || 0 } })
                  }
                  className="glass-card text-sm"
                  min="0"
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderSlotsConfig = () => {
    const config = wizardState.gameData.config as SlotsConfig || {
      reels: 3,
      symbols: [],
      combinations: [],
      spinDurationMs: 2000
    };
    
    const updateSlotsConfig = (newConfig: Partial<SlotsConfig>) => {
      updateWizardData({ config: { ...config, ...newConfig } });
    };

    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎСљР В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р РЋР С“Р В Р’В»Р В РЎвЂўР РЋРІР‚С™Р В РЎвЂўР В Р вЂ </h3>
          <p className="text-sm text-muted-foreground">Р В РІР‚ВР В Р’В°Р РЋР вЂљР В Р’В°Р В Р’В±Р В Р’В°Р В Р вЂ¦Р РЋРІР‚в„–, Р РЋР С“Р В РЎвЂР В РЎВР В Р вЂ Р В РЎвЂўР В Р’В»Р РЋРІР‚в„– Р В РЎвЂ Р В РЎвЂќР В РЎвЂўР В РЎВР В Р’В±Р В РЎвЂР В Р вЂ¦Р В Р’В°Р РЋРІР‚В Р В РЎвЂР В РЎвЂ</p>
        </div>
        
        <div className="space-y-4">
          <div className="grid grid-cols-2 gap-3">
            <div>
              <label className="text-sm font-medium text-foreground mb-2 block">Р В РЎв„ўР В РЎвЂўР В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂў Р В Р’В±Р В Р’В°Р РЋР вЂљР В Р’В°Р В Р’В±Р В Р’В°Р В Р вЂ¦Р В РЎвЂўР В Р вЂ </label>
              <Input
                type="number"
                value={config.reels}
                onChange={(e) => updateSlotsConfig({ reels: parseInt(e.target.value) || 3 })}
                className="glass-card"
                min="3"
                max="5"
              />
            </div>
            <div>
              <label className="text-sm font-medium text-foreground mb-2 block">Р В РІР‚в„ўР РЋР вЂљР В Р’ВµР В РЎВР РЋР РЏ Р В РЎвЂ”Р РЋР вЂљР В РЎвЂўР В РЎвЂќР РЋР вЂљР РЋРЎвЂњР РЋРІР‚С™Р В РЎвЂќР В РЎвЂ (Р В РЎВР РЋР С“)</label>
              <Input
                type="number"
                value={config.spinDurationMs}
                onChange={(e) => updateSlotsConfig({ spinDurationMs: parseInt(e.target.value) || 2000 })}
                className="glass-card"
                min="1000"
                max="5000"
              />
            </div>
          </div>
          
          <div className="text-center py-8 text-muted-foreground">
            Р В РЎСџР В РЎвЂўР В РўвЂР РЋР вЂљР В РЎвЂўР В Р’В±Р В Р вЂ¦Р РЋРІР‚в„–Р В Р’Вµ Р В Р вЂ¦Р В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р РЋР С“Р В РЎвЂР В РЎВР В Р вЂ Р В РЎвЂўР В Р’В»Р В РЎвЂўР В Р вЂ  Р В РЎвЂ Р В РЎвЂќР В РЎвЂўР В РЎВР В Р’В±Р В РЎвЂР В Р вЂ¦Р В Р’В°Р РЋРІР‚В Р В РЎвЂР В РІвЂћвЂ“ Р В Р’В±Р РЋРЎвЂњР В РўвЂР РЋРЎвЂњР РЋРІР‚С™ Р В РўвЂР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р В Р’В»Р В Р’ВµР В Р вЂ¦Р РЋРІР‚в„– Р В Р вЂ  Р РЋР С“Р В Р’В»Р В Р’ВµР В РўвЂР РЋРЎвЂњР РЋР вЂ№Р РЋРІР‚В°Р В Р’ВµР В РІвЂћвЂ“ Р В Р вЂ Р В Р’ВµР РЋР вЂљР РЋР С“Р В РЎвЂР В РЎвЂ
          </div>
        </div>
      </div>
    );
  };

  const renderRewardsStep = () => {
    const rewards = wizardState.gameData.rewards || [];
    
    const addReward = () => {
      const newReward: GameReward = {
        condition: 'Р В Р’В·Р В Р’В° Р В РЎвЂ”Р В РЎвЂўР В Р’В±Р В Р’ВµР В РўвЂР РЋРЎвЂњ',
        type: 'currency',
        value: 10,
        description: 'Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР В Р’В° Р В Р’В·Р В Р’В° Р В Р вЂ Р РЋРІР‚в„–Р В РЎвЂ”Р В РЎвЂўР В Р’В»Р В Р вЂ¦Р В Р’ВµР В Р вЂ¦Р В РЎвЂР В Р’Вµ Р РЋРЎвЂњР РЋР С“Р В Р’В»Р В РЎвЂўР В Р вЂ Р В РЎвЂР РЋР РЏ'
      };
      updateWizardData({ rewards: [...rewards, newReward] });
    };
    
    const updateReward = (index: number, reward: Partial<GameReward>) => {
      const newRewards = [...rewards];
      newRewards[index] = { ...newRewards[index], ...reward };
      updateWizardData({ rewards: newRewards });
    };
    
    const removeReward = (index: number) => {
      updateWizardData({ rewards: rewards.filter((_, i) => i !== index) });
    };

    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В Р Р‹Р В РЎвЂР РЋР С“Р РЋРІР‚С™Р В Р’ВµР В РЎВР В Р’В° Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂ</h3>
          <p className="text-sm text-muted-foreground">Р В РЎСљР В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р РЋРІР‚С™Р В Р’Вµ Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„– Р В Р’В·Р В Р’В° Р РЋР вЂљР В Р’В°Р В Р’В·Р В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р вЂ¦Р РЋРІР‚в„–Р В Р’Вµ Р В РўвЂР В Р’ВµР В РІвЂћвЂ“Р РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂР РЋР РЏ</p>
        </div>
        
        <div className="flex items-center justify-between">
          <label className="text-sm font-medium text-foreground">Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–</label>
          <button
            onClick={addReward}
            className="flex items-center gap-2 bg-primary text-primary-foreground px-3 py-2 rounded-lg hover:scale-[0.98] transition-transform text-sm"
          >
            <Plus className="w-4 h-4" />
            Р В РІР‚СњР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р В РЎвЂР РЋРІР‚С™Р РЋР Р‰ Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРЎвЂњ
          </button>
        </div>
        
        <div className="space-y-3 max-h-60 overflow-y-auto">
          {rewards.map((reward, index) => (
            <div key={index} className="glass-card rounded-xl p-4">
              <div className="flex items-center justify-between mb-3">
                <span className="text-sm font-medium text-foreground">Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР В Р’В° {index + 1}</span>
                <button
                  onClick={() => removeReward(index)}
                  className="p-1 hover:bg-red-100 rounded transition-colors"
                >
                  <X className="w-4 h-4 text-red-500" />
                </button>
              </div>
              
              <div className="grid grid-cols-2 gap-3 mb-3">
                <div>
                  <label className="text-xs text-muted-foreground mb-1 block">Р В Р в‚¬Р РЋР С“Р В Р’В»Р В РЎвЂўР В Р вЂ Р В РЎвЂР В Р’Вµ</label>
                  <Input
                    value={reward.condition}
                    onChange={(e) => updateReward(index, { condition: e.target.value })}
                    className="glass-card text-sm"
                    placeholder="Р В Р’В·Р В Р’В° Р В РЎвЂ”Р В РЎвЂўР В Р’В±Р В Р’ВµР В РўвЂР РЋРЎвЂњ"
                  />
                </div>
                <div>
                  <label className="text-xs text-muted-foreground mb-1 block">Р В РЎС›Р В РЎвЂР В РЎвЂ” Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–</label>
                  <Select
                    value={reward.type}
                    onValueChange={(value: RewardType) => updateReward(index, { type: value })}
                  >
                    <SelectTrigger className="glass-card text-sm">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {rewardTypes.filter(t => t.id !== 'none').map(type => (
                        <SelectItem key={type.id} value={type.id}>
                          {type.icon} {type.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="text-xs text-muted-foreground mb-1 block">Р В РЎв„ўР В РЎвЂўР В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂў</label>
                  <Input
                    type="number"
                    value={reward.value}
                    onChange={(e) => updateReward(index, { value: parseInt(e.target.value) || 0 })}
                    className="glass-card text-sm"
                    min="0"
                  />
                </div>
                <div>
                  <label className="text-xs text-muted-foreground mb-1 block">Р В РЎвЂєР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ</label>
                  <Input
                    value={reward.description}
                    onChange={(e) => updateReward(index, { description: e.target.value })}
                    className="glass-card text-sm"
                    placeholder="Р В РЎвЂєР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„–"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {rewards.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            Р В РІР‚СњР В РЎвЂўР В Р’В±Р В Р’В°Р В Р вЂ Р РЋР Р‰Р РЋРІР‚С™Р В Р’Вµ Р В Р вЂ¦Р В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂР РЋРІР‚в„– Р В РўвЂР В Р’В»Р РЋР РЏ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–
          </div>
        )}
      </div>
    );
  };

  const renderAccessStep = () => {
    const access = wizardState.gameData.access || { visibility: 'public', cooldownSeconds: 300 };
    
    const updateAccess = (newAccess: Partial<typeof access>) => {
      updateWizardData({ access: { ...access, ...newAccess } });
    };

    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎСљР В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р В РўвЂР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”Р В Р’В°</h3>
          <p className="text-sm text-muted-foreground">Р В РІР‚в„ўР В РЎвЂР В РўвЂР В РЎвЂР В РЎВР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„– Р В РЎвЂ Р В РЎвЂўР В РЎвЂ“Р РЋР вЂљР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋРІР‚РЋР В Р’ВµР В Р вЂ¦Р В РЎвЂР РЋР РЏ</p>
        </div>
        
        <div className="space-y-4">
          <div>
            <label className="text-sm font-medium text-foreground mb-2 block">Р В РІР‚в„ўР В РЎвЂР В РўвЂР В РЎвЂР В РЎВР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋР Р‰</label>
            <div className="space-y-2">
              <button
                onClick={() => updateAccess({ visibility: 'public' })}
                className={`w-full p-3 rounded-xl text-left transition-all ${
                  access.visibility === 'public' ? 'bg-primary text-primary-foreground' : 'glass-card'
                }`}
              >
                <div className="font-medium">РЎР‚РЎСџР Р‰РЎвЂ™ Р В РЎСџР РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР РЋРІР‚РЋР В Р вЂ¦Р В Р’В°Р РЋР РЏ</div>
                <div className={`text-sm ${access.visibility === 'public' ? 'opacity-90' : 'text-muted-foreground'}`}>
                  Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р В РўвЂР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”Р В Р вЂ¦Р В Р’В° Р В Р вЂ Р РЋР С“Р В Р’ВµР В РЎВ Р В РЎвЂ”Р В РЎвЂўР В Р’В»Р РЋР Р‰Р В Р’В·Р В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р В Р’ВµР В Р’В»Р РЋР РЏР В РЎВ
                </div>
              </button>
              <button
                onClick={() => updateAccess({ visibility: 'private' })}
                className={`w-full p-3 rounded-xl text-left transition-all ${
                  access.visibility === 'private' ? 'bg-primary text-primary-foreground' : 'glass-card'
                }`}
              >
                <div className="font-medium">РЎР‚РЎСџРІР‚СњРІР‚в„ў Р В РЎСџР РЋР вЂљР В РЎвЂР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р В Р вЂ¦Р В Р’В°Р РЋР РЏ</div>
                <div className={`text-sm ${access.visibility === 'private' ? 'opacity-90' : 'text-muted-foreground'}`}>
                  Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р В РўвЂР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”Р В Р вЂ¦Р В Р’В° Р РЋРІР‚С™Р В РЎвЂўР В Р’В»Р РЋР Р‰Р В РЎвЂќР В РЎвЂў Р В РЎвЂ”Р В РЎвЂў Р В РЎвЂ”Р РЋР вЂљР РЋР РЏР В РЎВР В РЎвЂўР В РІвЂћвЂ“ Р РЋР С“Р РЋР С“Р РЋРІР‚в„–Р В Р’В»Р В РЎвЂќР В Р’Вµ
                </div>
              </button>
              <button
                onClick={() => updateAccess({ visibility: 'byRole' })}
                className={`w-full p-3 rounded-xl text-left transition-all ${
                  access.visibility === 'byRole' ? 'bg-primary text-primary-foreground' : 'glass-card'
                }`}
              >
                <div className="font-medium">РЎР‚РЎСџРІР‚ВРўС’ Р В РЎСџР В РЎвЂў Р РЋР вЂљР В РЎвЂўР В Р’В»Р РЋР РЏР В РЎВ</div>
                <div className={`text-sm ${access.visibility === 'byRole' ? 'opacity-90' : 'text-muted-foreground'}`}>
                  Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р В РўвЂР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”Р В Р вЂ¦Р В Р’В° Р РЋРІР‚С™Р В РЎвЂўР В Р’В»Р РЋР Р‰Р В РЎвЂќР В РЎвЂў Р В РЎвЂўР В РЎвЂ”Р РЋР вЂљР В Р’ВµР В РўвЂР В Р’ВµР В Р’В»Р В Р’ВµР В Р вЂ¦Р В Р вЂ¦Р РЋРІР‚в„–Р В РЎВ Р РЋР вЂљР В РЎвЂўР В Р’В»Р РЋР РЏР В РЎВ
                </div>
              </button>
            </div>
          </div>
          
          <div>
            <label className="text-sm font-medium text-foreground mb-2 block">
              Р В РЎв„ўР РЋРЎвЂњР В Р’В»Р В РўвЂР В Р’В°Р РЋРЎвЂњР В Р вЂ¦ (Р РЋР С“Р В Р’ВµР В РЎвЂќР РЋРЎвЂњР В Р вЂ¦Р В РўвЂР РЋРІР‚в„–)
            </label>
            <Input
              type="number"
              value={access.cooldownSeconds}
              onChange={(e) => updateAccess({ cooldownSeconds: parseInt(e.target.value) || 0 })}
              className="glass-card"
              min="0"
              placeholder="300"
            />
            <p className="text-xs text-muted-foreground mt-1">
              Р В РІР‚в„ўР РЋР вЂљР В Р’ВµР В РЎВР РЋР РЏ Р В РЎвЂўР В Р’В¶Р В РЎвЂР В РўвЂР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋР РЏ Р В РЎВР В Р’ВµР В Р’В¶Р В РўвЂР РЋРЎвЂњ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РЎВР В РЎвЂ Р В РўвЂР В Р’В»Р РЋР РЏ Р В РЎвЂўР В РўвЂР В Р вЂ¦Р В РЎвЂўР В РЎвЂ“Р В РЎвЂў Р В РЎвЂ”Р В РЎвЂўР В Р’В»Р РЋР Р‰Р В Р’В·Р В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р В Р’ВµР В Р’В»Р РЋР РЏ
            </p>
          </div>
        </div>
      </div>
    );
  };

  const renderPreviewStep = () => {
    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</h3>
          <p className="text-sm text-muted-foreground">Р В РЎСџР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’ВµР РЋР вЂљР РЋР Р‰Р РЋРІР‚С™Р В Р’Вµ Р В Р вЂ¦Р В Р’В°Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В РЎвЂўР В РІвЂћвЂ“Р В РЎвЂќР В РЎвЂ Р В РЎвЂ”Р В Р’ВµР РЋР вЂљР В Р’ВµР В РўвЂ Р В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В Р’В°Р РЋРІР‚В Р В РЎвЂР В Р’ВµР В РІвЂћвЂ“</p>
        </div>
        
        <div className="glass-card rounded-2xl p-6">
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-secondary rounded-2xl flex items-center justify-center mx-auto mb-4">
              {wizardState.gameData.icon ? (
                <span className="text-3xl">{wizardState.gameData.icon}</span>
              ) : (
                <Gamepad2 className="w-8 h-8 text-foreground/70" />
              )}
            </div>
            <h4 className="text-lg font-medium text-foreground mb-2">
              {wizardState.gameData.name}
            </h4>
            <p className="text-sm text-muted-foreground mb-4">
              {wizardState.gameData.description}
            </p>
            
            <div className="inline-flex items-center gap-2 bg-secondary px-3 py-1 rounded-full text-sm">
              {gameTypes.find(t => t.id === wizardState.gameData.type)?.name}
            </div>
          </div>
          
          <div className="space-y-3 text-sm">
            <div className="flex justify-between">
              <span className="text-muted-foreground">Р В РЎв„ўР РЋРЎвЂњР В Р’В»Р В РўвЂР В Р’В°Р РЋРЎвЂњР В Р вЂ¦:</span>
              <span>{wizardState.gameData.access?.cooldownSeconds}Р РЋР С“</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Р В РІР‚в„ўР В РЎвЂР В РўвЂР В РЎвЂР В РЎВР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋР Р‰:</span>
              <span>{wizardState.gameData.access?.visibility}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-muted-foreground">Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂ:</span>
              <span>{wizardState.gameData.rewards?.length || 0}</span>
            </div>
          </div>
        </div>
        
        <div className="text-center">
          <button className="w-full bg-primary text-primary-foreground py-3 rounded-xl hover:scale-[0.98] transition-transform">
            Р В РЎСџР РЋР вЂљР В РЎвЂўР В Р’В±Р В Р вЂ¦Р В Р’В°Р РЋР РЏ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В Р’В°
          </button>
        </div>
      </div>
    );
  };

  const renderPublishStep = () => {
    return (
      <div className="space-y-6">
        <div className="text-center mb-6">
          <h3 className="text-lg font-medium text-foreground mb-2">Р В РЎСџР РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–</h3>
          <p className="text-sm text-muted-foreground">Р В РІР‚в„ўР РЋРІР‚в„–Р В Р’В±Р В Р’ВµР РЋР вЂљР В РЎвЂР РЋРІР‚С™Р В Р’Вµ, Р В РЎвЂќР В Р’В°Р В РЎвЂќ Р РЋР С“Р В РЎвЂўР РЋРІР‚В¦Р РЋР вЂљР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРЎвЂњ</p>
        </div>
        
        <div className="space-y-3">
          <button
            onClick={() => updateWizardData({ status: 'draft' })}
            className={`w-full p-4 rounded-xl text-left transition-all ${
              wizardState.gameData.status === 'draft' ? 'bg-orange-500 text-white' : 'glass-card'
            }`}
          >
            <div className="font-medium">РЎР‚РЎСџРІР‚СљРЎСљ Р В Р Р‹Р В РЎвЂўР РЋРІР‚В¦Р РЋР вЂљР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂќР В Р’В°Р В РЎвЂќ Р РЋРІР‚РЋР В Р’ВµР РЋР вЂљР В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В РЎвЂР В РЎвЂќ</div>
            <div className={`text-sm ${wizardState.gameData.status === 'draft' ? 'opacity-90' : 'text-muted-foreground'}`}>
              Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р В Р’В±Р РЋРЎвЂњР В РўвЂР В Р’ВµР РЋРІР‚С™ Р РЋР С“Р В РЎвЂўР РЋРІР‚В¦Р РЋР вЂљР В Р’В°Р В Р вЂ¦Р В Р’ВµР В Р вЂ¦Р В Р’В°, Р В Р вЂ¦Р В РЎвЂў Р В Р вЂ¦Р В Р’Вµ Р В Р’В±Р РЋРЎвЂњР В РўвЂР В Р’ВµР РЋРІР‚С™ Р В РўвЂР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”Р В Р вЂ¦Р В Р’В° Р В РЎвЂ”Р В РЎвЂўР В Р’В»Р РЋР Р‰Р В Р’В·Р В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р В Р’ВµР В Р’В»Р РЋР РЏР В РЎВ
            </div>
          </button>
          <button
            onClick={() => updateWizardData({ status: 'published' })}
            className={`w-full p-4 rounded-xl text-left transition-all ${
              wizardState.gameData.status === 'published' ? 'bg-green-600 text-white' : 'glass-card'
            }`}
          >
            <div className="font-medium">РЎР‚РЎСџРЎв„ўР вЂљ Р В РЎвЂєР В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р РЋР Р‰ Р РЋР С“Р РЋР вЂљР В Р’В°Р В Р’В·Р РЋРЎвЂњ</div>
            <div className={`text-sm ${wizardState.gameData.status === 'published' ? 'opacity-90' : 'text-muted-foreground'}`}>
              Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В° Р РЋР С“Р РЋРІР‚С™Р В Р’В°Р В Р вЂ¦Р В Р’ВµР РЋРІР‚С™ Р В РўвЂР В РЎвЂўР РЋР С“Р РЋРІР‚С™Р РЋРЎвЂњР В РЎвЂ”Р В Р вЂ¦Р В Р’В° Р В Р вЂ Р РЋР С“Р В Р’ВµР В РЎВ Р В РЎвЂ”Р В РЎвЂўР В Р’В»Р РЋР Р‰Р В Р’В·Р В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р В Р’ВµР В Р’В»Р РЋР РЏР В РЎВ Р В Р вЂ¦Р В Р’ВµР В РЎВР В Р’ВµР В РўвЂР В Р’В»Р В Р’ВµР В Р вЂ¦Р В Р вЂ¦Р В РЎвЂў
            </div>
          </button>
        </div>
        
        <div className="glass-card rounded-xl p-4">
          <h4 className="font-medium text-foreground mb-2">JSON Р В РЎвЂќР В РЎвЂўР В Р вЂ¦Р РЋРІР‚С›Р В РЎвЂР В РЎвЂ“Р РЋРЎвЂњР РЋР вЂљР В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏ</h4>
          <pre className="text-xs bg-secondary p-3 rounded-lg overflow-auto max-h-40 text-foreground">
            {JSON.stringify(wizardState.gameData, null, 2)}
          </pre>
          <button
            onClick={() => {
              navigator.clipboard.writeText(JSON.stringify(wizardState.gameData, null, 2));
              setCopiedJson(true);
              setTimeout(() => setCopiedJson(false), 2000);
            }}
            className="flex items-center gap-2 mt-2 text-sm text-primary hover:underline"
          >
            {copiedJson ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
            {copiedJson ? 'Р В Р Р‹Р В РЎвЂќР В РЎвЂўР В РЎвЂ”Р В РЎвЂР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂў!' : 'Р В Р Р‹Р В РЎвЂќР В РЎвЂўР В РЎвЂ”Р В РЎвЂР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р РЋР Р‰ JSON'}
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-background pb-20">
      <div className="p-6 space-y-6">
        {/* Р В РІР‚вЂќР В Р’В°Р В РЎвЂ“Р В РЎвЂўР В Р’В»Р В РЎвЂўР В Р вЂ Р В РЎвЂўР В РЎвЂќ */}
        <div className="flex items-center justify-between">
          <h1 className="text-xl font-medium text-foreground">Р В Р в‚¬Р В РЎвЂ”Р РЋР вЂљР В Р’В°Р В Р вЂ Р В Р’В»Р В Р’ВµР В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РЎВР В РЎвЂ</h1>
          <button
            onClick={() => setIsWizardOpen(true)}
            className="flex items-center gap-2 bg-primary text-primary-foreground px-4 py-2 rounded-xl hover:scale-[0.98] transition-transform apple-shadow"
          >
            <Plus className="w-4 h-4" />
            Р В Р Р‹Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРЎвЂњ
          </button>
        </div>

        {/* Р В Р Р‹Р РЋРІР‚С™Р В Р’В°Р РЋРІР‚С™Р В РЎвЂР РЋР С“Р РЋРІР‚С™Р В РЎвЂР В РЎвЂќР В Р’В° */}
        <div className="grid grid-cols-2 gap-4">
          <div className="glass-card p-4 rounded-2xl apple-shadow">
            <div className="text-center">
              <div className="text-2xl font-medium text-foreground mb-1">{games.length}</div>
              <div className="text-sm text-muted-foreground">Р В РІР‚в„ўР РЋР С“Р В Р’ВµР В РЎвЂ“Р В РЎвЂў Р В РЎвЂР В РЎвЂ“Р РЋР вЂљ</div>
            </div>
          </div>
          <div className="glass-card p-4 rounded-2xl apple-shadow">
            <div className="text-center">
              <div className="text-2xl font-medium text-green-600 mb-1">
                {games.filter(g => g.status === 'published').length}
              </div>
              <div className="text-sm text-muted-foreground">Р В РЎвЂєР В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В РЎвЂўР В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂў</div>
            </div>
          </div>
          <div className="glass-card p-4 rounded-2xl apple-shadow">
            <div className="text-center">
              <div className="text-2xl font-medium text-orange-500 mb-1">
                {games.filter(g => g.status === 'draft').length}
              </div>
              <div className="text-sm text-muted-foreground">Р В Р’В§Р В Р’ВµР РЋР вЂљР В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В РЎвЂР В РЎвЂќР В РЎвЂ</div>
            </div>
          </div>
          <div className="glass-card p-4 rounded-2xl apple-shadow">
            <div className="text-center">
              <div className="text-2xl font-medium text-muted-foreground mb-1">
                {games.filter(g => g.status === 'archived').length}
              </div>
              <div className="text-sm text-muted-foreground">Р В РІР‚в„ў Р В Р’В°Р РЋР вЂљР РЋРІР‚В¦Р В РЎвЂР В Р вЂ Р В Р’Вµ</div>
            </div>
          </div>
        </div>

        {/* Р В Р Р‹Р В РЎвЂ”Р В РЎвЂР РЋР С“Р В РЎвЂўР В РЎвЂќ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљ */}
        <div className="space-y-4">
          {games.length > 0 ? (
            games.map((game) => {
              const gameType = gameTypes.find(t => t.id === game.type);
              const GameIcon = gameType?.icon || Gamepad2;
              
              return (
                <div key={game.id} className="glass-card rounded-2xl p-4 apple-shadow">
                  <div className="flex items-start gap-4">
                    {/* Р В Р’ВР В РЎвЂќР В РЎвЂўР В Р вЂ¦Р В РЎвЂќР В Р’В° Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„– */}
                    <div className="w-12 h-12 glass-card rounded-xl flex items-center justify-center">
                      {game.icon ? (
                        <span className="text-2xl">{game.icon}</span>
                      ) : (
                        <GameIcon className="w-6 h-6 text-foreground/70" />
                      )}
                    </div>
                    
                    <div className="flex-1">
                      {/* Р В РІР‚вЂќР В Р’В°Р В РЎвЂ“Р В РЎвЂўР В Р’В»Р В РЎвЂўР В Р вЂ Р В РЎвЂўР В РЎвЂќ Р В РЎвЂ Р РЋР С“Р РЋРІР‚С™Р В Р’В°Р РЋРІР‚С™Р РЋРЎвЂњР РЋР С“ */}
                      <div className="flex items-start justify-between mb-2">
                        <div>
                          <div className="font-medium text-foreground">{game.name}</div>
                          <div className="text-sm text-muted-foreground">
                            {gameType?.name} Р Р†Р вЂљРЎС› Р В РЎв„ўР РЋРЎвЂњР В Р’В»Р В РўвЂР В Р’В°Р РЋРЎвЂњР В Р вЂ¦: {game.access.cooldownSeconds}Р РЋР С“
                          </div>
                        </div>
                        <div className="flex items-center gap-3">
                          <div className={`text-sm font-medium ${getStatusColor(game.status)}`}>
                            {getStatusLabel(game.status)}
                          </div>
                          <button
                            onClick={() => copyGameJson(game)}
                            className="p-2 hover:bg-black/5 rounded-lg transition-colors"
                            title="Р В РЎв„ўР В РЎвЂўР В РЎвЂ”Р В РЎвЂР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р РЋР Р‰ JSON"
                          >
                            {copiedJson ? (
                              <Check className="w-4 h-4 text-green-600" />
                            ) : (
                              <Copy className="w-4 h-4 text-foreground/70" />
                            )}
                          </button>
                        </div>
                      </div>
                      
                      {/* Р В РЎвЂєР В РЎвЂ”Р В РЎвЂР РЋР С“Р В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ */}
                      {game.description && (
                        <div className="text-sm text-muted-foreground mb-3">
                          {game.description}
                        </div>
                      )}
                      
                      {/* Р В Р Р‹Р РЋРІР‚С™Р В Р’В°Р РЋРІР‚С™Р В РЎвЂР РЋР С“Р РЋРІР‚С™Р В РЎвЂР В РЎвЂќР В Р’В° */}
                      <div className="grid grid-cols-3 gap-4 text-sm mb-4">
                        <div>
                          <span className="text-muted-foreground">Р В Р’ВР В РЎвЂ“Р РЋР вЂљ: </span>
                          <span className="text-foreground">{game.stats?.totalPlays || 0}</span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Р В РЎСљР В Р’В°Р В РЎвЂ“Р РЋР вЂљР В Р’В°Р В РўвЂ: </span>
                          <span className="text-foreground">{game.stats?.totalRewards || 0}</span>
                        </div>
                        <div>
                          <span className="text-muted-foreground">Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В РЎвЂўР В РЎвЂќР В РЎвЂўР В Р вЂ : </span>
                          <span className="text-foreground">{game.stats?.uniquePlayers || 0}</span>
                        </div>
                      </div>
                      
                      {/* Р В РІР‚СњР В Р’В°Р РЋРІР‚С™Р В Р’В° Р В РЎвЂўР В Р’В±Р В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В Р’В»Р В Р’ВµР В Р вЂ¦Р В РЎвЂР РЋР РЏ */}
                      <div className="text-xs text-muted-foreground mb-4">
                        Р В РЎвЂєР В Р’В±Р В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В Р’В»Р В Р’ВµР В Р вЂ¦Р В РЎвЂў: {formatDate(game.updatedAt)}
                        {game.publishedAt && (
                          <> Р Р†Р вЂљРЎС› Р В РЎвЂєР В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В РЎвЂўР В Р вЂ Р В Р’В°Р В Р вЂ¦Р В РЎвЂў: {formatDate(game.publishedAt)}</>
                        )}
                      </div>
                      
                      {/* Р В РІР‚СњР В Р’ВµР В РІвЂћвЂ“Р РЋР С“Р РЋРІР‚С™Р В Р вЂ Р В РЎвЂР РЋР РЏ */}
                      <div className="flex items-center gap-2">
                        <button
                          onClick={() => {
                            setSelectedGame(game);
                            setIsPreviewOpen(true);
                          }}
                          className="flex items-center gap-2 px-3 py-2 glass-card rounded-lg hover:scale-[0.98] transition-transform text-sm"
                        >
                          <Eye className="w-4 h-4" />
                          Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ
                        </button>
                        <button
                          className="flex items-center gap-2 px-3 py-2 glass-card rounded-lg hover:scale-[0.98] transition-transform text-sm"
                        >
                          <Edit className="w-4 h-4" />
                          Р В Р’В Р В Р’ВµР В РўвЂР В Р’В°Р В РЎвЂќР РЋРІР‚С™Р В РЎвЂР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р РЋР Р‰
                        </button>
                        
                        {game.status === 'draft' && (
                          <button
                            onClick={() => handleGameStatusChange(game.id, 'published')}
                            className="flex items-center gap-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:scale-[0.98] transition-transform text-sm"
                          >
                            <Play className="w-4 h-4" />
                            Р В РЎвЂєР В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р РЋР Р‰
                          </button>
                        )}
                        
                        {game.status === 'published' && (
                          <button
                            onClick={() => handleGameStatusChange(game.id, 'draft')}
                            className="flex items-center gap-2 px-3 py-2 bg-orange-500 text-white rounded-lg hover:scale-[0.98] transition-transform text-sm"
                          >
                            <Pause className="w-4 h-4" />
                            Р В Р Р‹Р В Р вЂ¦Р РЋР РЏР РЋРІР‚С™Р РЋР Р‰ Р РЋР С“ Р В РЎвЂ”Р РЋРЎвЂњР В Р’В±Р В Р’В»Р В РЎвЂР В РЎвЂќР В Р’В°Р РЋРІР‚В Р В РЎвЂР В РЎвЂ
                          </button>
                        )}
                        
                        <button
                          onClick={() => handleGameStatusChange(game.id, 'archived')}
                          className="flex items-center gap-2 px-3 py-2 glass-card rounded-lg hover:scale-[0.98] transition-transform text-sm"
                        >
                          <Archive className="w-4 h-4" />
                          Р В РЎвЂ™Р РЋР вЂљР РЋРІР‚В¦Р В РЎвЂР В Р вЂ Р В РЎвЂР РЋР вЂљР В РЎвЂўР В Р вЂ Р В Р’В°Р РЋРІР‚С™Р РЋР Р‰
                        </button>
                        
                        <button
                          onClick={() => handleDeleteGame(game.id)}
                          className="flex items-center gap-2 px-3 py-2 bg-red-500 text-white rounded-lg hover:scale-[0.98] transition-transform text-sm"
                        >
                          <Trash2 className="w-4 h-4" />
                          Р В Р в‚¬Р В РўвЂР В Р’В°Р В Р’В»Р В РЎвЂР РЋРІР‚С™Р РЋР Р‰
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })
          ) : (
            <div className="glass-card rounded-2xl p-8 text-center apple-shadow">
              <Gamepad2 className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground mb-4">Р В Р’ВР В РЎвЂ“Р РЋР вЂљ Р В РЎвЂ”Р В РЎвЂўР В РЎвЂќР В Р’В° Р В Р вЂ¦Р В Р’ВµР РЋРІР‚С™</p>
              <button
                onClick={() => setIsWizardOpen(true)}
                className="bg-primary text-primary-foreground px-4 py-2 rounded-xl hover:scale-[0.98] transition-transform"
              >
                Р В Р Р‹Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂ”Р В Р’ВµР РЋР вЂљР В Р вЂ Р РЋРЎвЂњР РЋР вЂ№ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРЎвЂњ
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Р В РЎС™Р В Р’В°Р РЋР С“Р РЋРІР‚С™Р В Р’ВµР РЋР вЂљ Р РЋР С“Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋР РЏ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„– */}
      <Dialog open={isWizardOpen} onOpenChange={setIsWizardOpen}>
        <DialogContent className="glass-card rounded-3xl border-2 border-border apple-shadow w-[90vw] max-w-2xl p-0 max-h-[90vh] flex flex-col [&>button]:hidden">
          <div className="p-6 flex-1 flex flex-col">
            {/* Р В РІР‚вЂќР В Р’В°Р В РЎвЂ“Р В РЎвЂўР В Р’В»Р В РЎвЂўР В Р вЂ Р В РЎвЂўР В РЎвЂќ */}
            <div className="flex items-center justify-between mb-6">
              <div>
                <DialogTitle className="text-lg font-medium text-foreground">
                  Р В Р Р‹Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р В Р вЂ¦Р В РЎвЂР В Р’Вµ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–
                </DialogTitle>
                <p className="text-sm text-muted-foreground">
                  Р В Р РѓР В Р’В°Р В РЎвЂ“ {wizardState.currentStep + 1} Р В РЎвЂР В Р’В· {wizardState.steps.length}: {wizardState.steps[wizardState.currentStep].title}
                </p>
              </div>
              <button
                onClick={() => {
                  setIsWizardOpen(false);
                  resetWizard();
                }}
                className="p-2 hover:bg-black/5 rounded-lg transition-colors"
              >
                <X className="w-4 h-4 text-foreground/70" />
              </button>
            </div>
            
            <DialogDescription className="sr-only">
              Р В РЎС™Р В Р’В°Р РЋР С“Р РЋРІР‚С™Р В Р’ВµР РЋР вЂљ Р РЋР С“Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р В Р вЂ¦Р В РЎвЂР РЋР РЏ Р В Р вЂ¦Р В РЎвЂўР В Р вЂ Р В РЎвЂўР В РІвЂћвЂ“ Р В РЎВР В РЎвЂР В Р вЂ¦Р В РЎвЂ-Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–
            </DialogDescription>

            {/* Р В РЎСџР РЋР вЂљР В РЎвЂўР В РЎвЂ“Р РЋР вЂљР В Р’ВµР РЋР С“Р РЋР С“-Р В Р’В±Р В Р’В°Р РЋР вЂљ */}
            <div className="flex items-center gap-2 mb-6">
              {wizardState.steps.map((step, index) => (
                <div
                  key={step.id}
                  className={`flex-1 h-2 rounded-full transition-colors ${
                    index < wizardState.currentStep
                      ? 'bg-green-500'
                      : index === wizardState.currentStep
                      ? 'bg-primary'
                      : 'bg-secondary'
                  }`}
                />
              ))}
            </div>

            {/* Р В Р Р‹Р В РЎвЂўР В РўвЂР В Р’ВµР РЋР вЂљР В Р’В¶Р В РЎвЂР В РЎВР В РЎвЂўР В Р’Вµ Р РЋРІвЂљВ¬Р В Р’В°Р В РЎвЂ“Р В Р’В° */}
            <div className="flex-1 overflow-y-auto">
              {renderWizardStep()}
            </div>

            {/* Р В РЎСљР В Р’В°Р В Р вЂ Р В РЎвЂР В РЎвЂ“Р В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏ */}
            <div className="flex items-center justify-between pt-6 mt-6 border-t border-border">
              <button
                onClick={prevStep}
                disabled={wizardState.currentStep === 0}
                className="flex items-center gap-2 px-4 py-2 glass-card rounded-xl hover:scale-[0.98] transition-transform disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <ChevronLeft className="w-4 h-4" />
                Р В РЎСљР В Р’В°Р В Р’В·Р В Р’В°Р В РўвЂ
              </button>
              
              <div className="text-sm text-muted-foreground">
                {wizardState.currentStep + 1} / {wizardState.steps.length}
              </div>
              
              {wizardState.currentStep === wizardState.steps.length - 1 ? (
                <button
                  onClick={createGame}
                  disabled={!canProceedToNext()}
                  className="flex items-center gap-2 bg-primary text-primary-foreground px-4 py-2 rounded-xl hover:scale-[0.98] transition-transform disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Р В Р Р‹Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р РЋРІР‚С™Р РЋР Р‰ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРЎвЂњ
                </button>
              ) : (
                <button
                  onClick={nextStep}
                  disabled={!canProceedToNext()}
                  className="flex items-center gap-2 bg-primary text-primary-foreground px-4 py-2 rounded-xl hover:scale-[0.98] transition-transform disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Р В РІР‚СњР В Р’В°Р В Р’В»Р В Р’ВµР В Р’Вµ
                  <ChevronRight className="w-4 h-4" />
                </button>
              )}
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„– */}
      <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
        <DialogContent className="glass-card rounded-3xl border-2 border-border apple-shadow w-[90vw] max-w-md p-0 [&>button]:hidden">
          <div className="p-6">
            <div className="flex items-center justify-between mb-6">
              <DialogTitle className="text-lg font-medium text-foreground">
                Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–
              </DialogTitle>
              <button
                onClick={() => setIsPreviewOpen(false)}
                className="p-2 hover:bg-black/5 rounded-lg transition-colors"
              >
                <X className="w-4 h-4 text-foreground/70" />
              </button>
            </div>
            
            <DialogDescription className="sr-only">
              Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ Р РЋР С“Р В РЎвЂўР В Р’В·Р В РўвЂР В Р’В°Р В Р вЂ¦Р В Р вЂ¦Р В РЎвЂўР В РІвЂћвЂ“ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР РЋРІР‚в„–
            </DialogDescription>

            {selectedGame && (
              <div className="text-center">
                <div className="w-16 h-16 bg-secondary rounded-2xl flex items-center justify-center mx-auto mb-4">
                  {selectedGame.icon ? (
                    <span className="text-3xl">{selectedGame.icon}</span>
                  ) : (
                    <Gamepad2 className="w-8 h-8 text-foreground/70" />
                  )}
                </div>
                <h3 className="text-lg font-medium text-foreground mb-2">
                  {selectedGame.name}
                </h3>
                <p className="text-sm text-muted-foreground mb-6">
                  {selectedGame.description}
                </p>
                
                <div className="glass-card rounded-2xl p-4 mb-6">
                  <div className="text-center text-muted-foreground">
                    Р В РЎСџР РЋР вЂљР В Р’ВµР В РўвЂР В РЎвЂ”Р РЋР вЂљР В РЎвЂўР РЋР С“Р В РЎВР В РЎвЂўР РЋРІР‚С™Р РЋР вЂљ Р В РЎвЂР В РЎвЂ“Р РЋР вЂљР В РЎвЂўР В Р вЂ Р В РЎвЂўР В РЎвЂ“Р В РЎвЂў Р В РЎвЂР В Р вЂ¦Р РЋРІР‚С™Р В Р’ВµР РЋР вЂљР РЋРІР‚С›Р В Р’ВµР В РІвЂћвЂ“Р РЋР С“Р В Р’В° Р В Р’В±Р РЋРЎвЂњР В РўвЂР В Р’ВµР РЋРІР‚С™ Р В Р’В·Р В РўвЂР В Р’ВµР РЋР С“Р РЋР Р‰
                  </div>
                </div>
                
                <button className="w-full bg-primary text-primary-foreground py-3 rounded-xl hover:scale-[0.98] transition-transform">
                  Р В Р’ВР В РЎвЂ“Р РЋР вЂљР В Р’В°Р РЋРІР‚С™Р РЋР Р‰
                </button>
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Р В РІР‚ВР РЋРІР‚в„–Р РЋР С“Р РЋРІР‚С™Р РЋР вЂљР В Р’В°Р РЋР РЏ Р В Р вЂ¦Р В Р’В°Р В Р вЂ Р В РЎвЂР В РЎвЂ“Р В Р’В°Р РЋРІР‚В Р В РЎвЂР РЋР РЏ */}
      <div className="fixed bottom-0 left-0 right-0 bg-background border-t border-border/20">
        <div className="p-6">
          <div className="grid grid-cols-4 gap-4 mb-4">
            {navigationItems.slice(0, 4).map((item, index) => {
              const Icon = item.icon;
              const isActive = item.section === 'games';
              return (
                <button 
                  key={index} 
                  className="flex flex-col items-center text-center"
                  onClick={() => onNavigateToSection(item.section)}
                >
                  <div className={`w-12 h-12 rounded-xl flex items-center justify-center mb-2 apple-shadow ${
                    isActive ? 'bg-primary' : 'glass-card'
                  }`}>
                    <Icon className={`w-6 h-6 ${
                      isActive ? 'text-white' : 'text-foreground/70'
                    }`} />
                  </div>
                  <span className={`text-xs ${
                    isActive ? 'text-primary font-medium' : 'text-muted-foreground'
                  }`}>{item.label}</span>
                </button>
              );
            })}
          </div>
          <div className="grid grid-cols-4 gap-4">
            {navigationItems.slice(4, 8).map((item, index) => {
              const Icon = item.icon;
              const isActive = item.section === 'games';
              return (
                <button 
                  key={index} 
                  className="flex flex-col items-center text-center"
                  onClick={() => onNavigateToSection(item.section)}
                >
                  <div className={`w-12 h-12 rounded-xl flex items-center justify-center mb-2 apple-shadow ${
                    isActive ? 'bg-primary' : 'glass-card'
                  }`}>
                    <Icon className={`w-6 h-6 ${
                      isActive ? 'text-white' : 'text-foreground/70'
                    }`} />
                  </div>
                  <span className={`text-xs ${
                    isActive ? 'text-primary font-medium' : 'text-muted-foreground'
                  }`}>{item.label}</span>
                </button>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}
