import React, { useState, useEffect } from 'react';
import { X, Bell, Palette, MessageCircle, Shield, Eye, EyeOff, Paperclip, ChevronRight } from 'lucide-react';
import { useUserRole } from '../hooks/useUserRole';

interface SettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
  theme: 'light' | 'dark';
  onToggleTheme: () => void;
  onNavigate?: (page: string) => void;
  onOpenAdminPanel?: () => void;
  onOpenProblemReport?: () => void;
  userId?: string;
}

// Р вЂР В°Р В·Р В° Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р В°Р Т‘Р СР С‘Р Р…Р С‘РЎРѓРЎвЂљРЎР‚Р В°РЎвЂљР С•РЎР‚Р С•Р Р†
const ADMIN_USERS = [
  // СЂСџРЏвЂ  Р вЂњР вЂєР С’Р вЂ™Р СњР В«Р вЂў Р С’Р вЂќР СљР ВР СњР В« (Р Р†РЎвЂ№РЎРѓРЎв‚¬Р С‘Р Вµ Р С—РЎР‚Р В°Р Р†Р В°)
  { telegramId: '123456789', username: 'ivan_petrov', role: 'Р С–Р В»Р В°Р Р†Р Р…РЎвЂ№Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  { telegramId: '987654321', username: 'maria_sidorova', role: 'Р С–Р В»Р В°Р Р†Р Р…РЎвЂ№Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  
  // СЂСџТђвЂЎ Р РЋР СћР С’Р В Р РЃР ВР вЂў Р С’Р вЂќР СљР ВР СњР В«
  { telegramId: '111222333', username: 'alexey_kozlov', role: 'РЎРѓРЎвЂљР В°РЎР‚РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  { telegramId: '444555666', username: 'elena_morozova', role: 'РЎРѓРЎвЂљР В°РЎР‚РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  { telegramId: '1609556178', username: 'admin_senior', role: 'РЎРѓРЎвЂљР В°РЎР‚РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  
  // СЂСџТђв‚¬ Р СљР вЂєР С’Р вЂќР РЃР ВР вЂў Р С’Р вЂќР СљР ВР СњР В«
  { telegramId: '777888999', username: 'dmitry_volkov', role: 'Р СР В»Р В°Р Т‘РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  { telegramId: '000111222', username: 'anna_lebedeva', role: 'Р СР В»Р В°Р Т‘РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…' },
  
  // СЂСџвЂТђ Р СћР ВР СљР вЂєР ВР вЂќР В«
  { telegramId: '333444555', username: 'sergey_orlov', role: 'РЎвЂљР С‘Р СР В»Р С‘Р Т‘', teamNumber: 1 },
  { telegramId: '666777888', username: 'olga_sokolova', role: 'РЎвЂљР С‘Р СР В»Р С‘Р Т‘', teamNumber: 2 },
  { telegramId: '999000111', username: 'mikhail_rybakov', role: 'РЎвЂљР С‘Р СР В»Р С‘Р Т‘', teamNumber: 3 }
];

// Р РЋР ВµР С”РЎР‚Р ВµРЎвЂљР Р…РЎвЂ№Р Вµ Р С”Р С•Р Т‘РЎвЂ№ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°
const SECRET_CODES = {
  'df1GE%LwVAAC': 'Р С–Р В»Р В°Р Р†Р Р…РЎвЂ№Р в„–_Р В°Р Т‘Р СР С‘Р Р…',    // Р СџР С•Р В»Р Р…РЎвЂ№Р в„– Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С— Р С”Р С• Р Р†РЎРѓР ВµР С РЎвЂћРЎС“Р Р…Р С”РЎвЂ Р С‘РЎРЏР С
  '0caFyNh}w%': 'РЎРѓРЎвЂљР В°РЎР‚РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…',      // Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏР СР С‘, Р С”Р С•Р Р…РЎвЂљР ВµР Р…РЎвЂљР С•Р С
  '~3SogEhz': 'Р СР В»Р В°Р Т‘РЎв‚¬Р С‘Р в„–_Р В°Р Т‘Р СР С‘Р Р…',        // Р СљР С•Р Т‘Р ВµРЎР‚Р В°РЎвЂ Р С‘РЎРЏ, Р С—РЎР‚Р С•РЎРѓР СР С•РЎвЂљРЎР‚ РЎРѓРЎвЂљР В°РЎвЂљР С‘РЎРѓРЎвЂљР С‘Р С”Р С‘
  'SToU{~': 'РЎвЂљР С‘Р СР В»Р С‘Р Т‘'                  // Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С”Р С•Р СР В°Р Р…Р Т‘Р С•Р в„–, Р В·Р В°Р Т‘Р В°РЎвЂЎР В°Р СР С‘
};

export const SettingsModal: React.FC<SettingsModalProps> = ({
  isOpen,
  onClose,
  theme,
  onToggleTheme,
  onNavigate,
  onOpenAdminPanel,
  onOpenProblemReport,
  userId
}) => {
  const [notifications, setNotifications] = useState(true);
  const [themeToggleCount, setThemeToggleCount] = useState(0);
  const [adminAuthorized, setAdminAuthorized] = useState(false);
  const [reportModalOpen, setReportModalOpen] = useState(false);
  const [secretCodeModalOpen, setSecretCodeModalOpen] = useState(false);
  
  // Р ВРЎРѓР С—Р С•Р В»РЎРЉР В·РЎС“Р ВµР С РЎвЂ¦РЎС“Р С” Р Т‘Р В»РЎРЏ Р С—РЎР‚Р С•Р Р†Р ВµРЎР‚Р С”Р С‘ РЎР‚Р С•Р В»Р С‘ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  const { user, canAccessAdminPanel, userRole } = useUserRole(userId || '');
  const [reportText, setReportText] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [telegramId, setTelegramId] = useState('');
  const [secretCode, setSecretCode] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  // Р вЂ”Р В°Р С–РЎР‚РЎС“Р В·Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р Р…Р С•Р С–Р С• РЎРѓР С•РЎРѓРЎвЂљР С•РЎРЏР Р…Р С‘РЎРЏ Р С—РЎР‚Р С‘ Р С‘Р Р…Р С‘РЎвЂ Р С‘Р В°Р В»Р С‘Р В·Р В°РЎвЂ Р С‘Р С‘
  useEffect(() => {
    const savedNotifications = localStorage.getItem('notifications');
    if (savedNotifications !== null) {
      setNotifications(JSON.parse(savedNotifications));
    }

    // Р СџРЎР‚Р С•Р Р†Р ВµРЎР‚РЎРЏР ВµР С Р В°Р Р†РЎвЂљР С•РЎР‚Р С‘Р В·Р В°РЎвЂ Р С‘РЎР‹ Р В°Р Т‘Р СР С‘Р Р…Р В°
    const adminData = localStorage.getItem('adminLoginData');
    if (adminData) {
      try {
        const parsedData = JSON.parse(adminData);
        if (parsedData.telegramId && parsedData.accessCode) {
          setAdminAuthorized(true);
        }
      } catch (error) {
        console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С—РЎР‚Р С‘ Р С—РЎР‚Р С•Р Р†Р ВµРЎР‚Р С”Р Вµ Р В°Р Т‘Р СР С‘Р Р…РЎРѓР С”Р С‘РЎвЂ¦ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦:', error);
      }
    }
  }, []);

  const handleNotificationsChange = (checked: boolean) => {
    setNotifications(checked);
    localStorage.setItem('notifications', JSON.stringify(checked));
  };

  const handleThemeToggle = () => {
    // РІС™В РїС‘РЏ Р вЂ™Р С’Р вЂ“Р СњР С›: Р РЋРЎвЂЎР С‘РЎвЂљР В°Р ВµР С РЎвЂљР С•Р В»РЎРЉР С”Р С• Р вЂ™Р С™Р вЂєР В®Р В§Р вЂўР СњР ВР Р‡ РЎвЂљР ВµР СР Р…Р С•Р в„– РЎвЂљР ВµР СРЎвЂ№ (Р Р…Р Вµ Р Р†РЎвЂ№Р С”Р В»РЎР‹РЎвЂЎР ВµР Р…Р С‘РЎРЏ)
    if (theme === 'light') { // Р вЂўРЎРѓР В»Р С‘ РЎвЂљР ВµР С”РЎС“РЎвЂ°Р В°РЎРЏ РЎвЂљР ВµР СР В° РЎРѓР Р†Р ВµРЎвЂљР В»Р В°РЎРЏ Р С‘ Р С—Р ВµРЎР‚Р ВµР С”Р В»РЎР‹РЎвЂЎР В°Р ВµР С Р Р…Р В° РЎвЂљР ВµР СР Р…РЎС“РЎР‹
      const newCount = themeToggleCount + 1;
      setThemeToggleCount(newCount);
      
      console.log(`СЂСџвЂќСћ Р РЋРЎвЂЎР ВµРЎвЂљРЎвЂЎР С‘Р С” Р Р†Р С”Р В»РЎР‹РЎвЂЎР ВµР Р…Р С‘Р в„– РЎвЂљР ВµР СР Р…Р С•Р в„– РЎвЂљР ВµР СРЎвЂ№: ${newCount}/8`);
      
      // СЂСџвЂќС’ Р РЋР вЂўР С™Р В Р вЂўР СћР СњР С’Р Р‡ Р С’Р С™Р СћР ВР вЂ™Р С’Р В¦Р ВР Р‡ Р СњР С’ 8-Р Сљ Р вЂ™Р С™Р вЂєР В®Р В§Р вЂўР СњР ВР В
      if (newCount === 8) {
        console.log('СЂСџС™Р‚ Р РЋР вЂўР С™Р В Р вЂўР СћР СњР В«Р в„ў Р С™Р С›Р вЂќ Р С’Р С™Р СћР ВР вЂ™Р ВР В Р С›Р вЂ™Р С’Р Сњ!');
        setSecretCodeModalOpen(true);
        setThemeToggleCount(0); // Р РЋР В±РЎР‚Р В°РЎРѓРЎвЂ№Р Р†Р В°Р ВµР С РЎРѓРЎвЂЎР ВµРЎвЂљРЎвЂЎР С‘Р С”
      }
    }
    
    onToggleTheme(); // Р вЂ™РЎвЂ№Р С—Р С•Р В»Р Р…РЎРЏР ВµР С Р С•Р В±РЎвЂ№РЎвЂЎР Р…Р С•Р Вµ Р С—Р ВµРЎР‚Р ВµР С”Р В»РЎР‹РЎвЂЎР ВµР Р…Р С‘Р Вµ РЎвЂљР ВµР СРЎвЂ№
  };

  const handleReportSubmit = () => {
    const reportData = {
      text: reportText,
      file: selectedFile,
      timestamp: new Date(),
      userAgent: navigator.userAgent,
      url: window.location.href
    };
    
    console.log('СЂСџвЂњВ§ Р С›РЎвЂљРЎвЂЎР ВµРЎвЂљ Р С•РЎвЂљР С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…:', reportData);
    
    setReportModalOpen(false);
    setReportText('');
    setSelectedFile(null);
  };

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const handleSecretCodeSubmit = () => {
    if (telegramId && secretCode) {
      // 1РїС‘РЏРІС“Р€ Р СџР В Р С›Р вЂ™Р вЂўР В Р С™Р С’ Р вЂ™Р С’Р вЂєР ВР вЂќР СњР С›Р РЋР СћР В Р С™Р С›Р вЂќР С’
      const role = SECRET_CODES[secretCode as keyof typeof SECRET_CODES];
      if (!role) {
        alert('РІСњРЉ Р СњР ВµР Р†Р ВµРЎР‚Р Р…РЎвЂ№Р в„– Р С”Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°');
        return;
      }
      
      // 2РїС‘РЏРІС“Р€ Р СџР С›Р ВР РЋР С™ Р СџР С›Р вЂєР В¬Р вЂ”Р С›Р вЂ™Р С’Р СћР вЂўР вЂєР Р‡ Р вЂ™ Р вЂР С’Р вЂ”Р вЂў
        const user = ADMIN_USERS.find(u => 
          u.telegramId === telegramId && u.role === role
        );
        
      if (!user) {
        alert(`РІСњРЉ Р СџР С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЉ РЎРѓ ID ${telegramId} Р Р…Р Вµ Р Р…Р В°Р в„–Р Т‘Р ВµР Р… Р Р† РЎР‚Р С•Р В»Р С‘ "${role}"`);
        return;
      }
      
      // 3РїС‘РЏРІС“Р€ Р Р€Р РЋР СџР вЂўР РЃР СњР С’Р Р‡ Р С’Р вЂ™Р СћР С›Р В Р ВР вЂ”Р С’Р В¦Р ВР Р‡
      console.log('РІСљвЂ¦ Р С’Р Т‘Р СР С‘Р Р… Р В°Р Р†РЎвЂљР С•РЎР‚Р С‘Р В·Р С•Р Р†Р В°Р Р…:', user);
      
      // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…РЎРЏР ВµР С Р Т‘Р В°Р Р…Р Р…РЎвЂ№Р Вµ Р Т‘Р В»РЎРЏ AdminPanel
          localStorage.setItem('adminLoginData', JSON.stringify({
            telegramId,
        accessCode: secretCode,
        role: user.role,
        username: user.username,
        loginTime: new Date().toISOString()
          }));
          
      // РІСљвЂ¦ Р Р€РЎРѓРЎвЂљР В°Р Р…Р В°Р Р†Р В»Р С‘Р Р†Р В°Р ВµР С РЎвЂћР В»Р В°Р С– Р В°Р Р†РЎвЂљР С•РЎР‚Р С‘Р В·Р В°РЎвЂ Р С‘Р С‘ (Р С™Р СњР С›Р СџР С™Р С’ Р СџР С›Р Р‡Р вЂ™Р ВР СћР РЋР Р‡ Р вЂ™ Р СњР С’Р РЋР СћР В Р С›Р в„ўР С™Р С’Р Тђ)
      setAdminAuthorized(true);
          
      // Р вЂ”Р В°Р С”РЎР‚РЎвЂ№Р Р†Р В°Р ВµР С РЎРѓР ВµР С”РЎР‚Р ВµРЎвЂљР Р…РЎвЂ№Р в„– Р СР С•Р Т‘Р В°Р В» Р С‘ Р С•РЎвЂЎР С‘РЎвЂ°Р В°Р ВµР С Р С—Р С•Р В»РЎРЏ
          setSecretCodeModalOpen(false);
          setTelegramId('');
          setSecretCode('');
      
      console.log('РІСљвЂ¦ Р С’Р Т‘Р СР С‘Р Р… Р В°Р Р†РЎвЂљР С•РЎР‚Р С‘Р В·Р С•Р Р†Р В°Р Р…. Р С™Р Р…Р С•Р С—Р С”Р В° Р В°Р Т‘Р СР С‘Р Р… Р С—Р В°Р Р…Р ВµР В»Р С‘ Р С—Р С•РЎРЏР Р†Р С‘Р В»Р В°РЎРѓРЎРЉ Р Р† Р Р…Р В°РЎРѓРЎвЂљРЎР‚Р С•Р в„–Р С”Р В°РЎвЂ¦.');
    }
  };

  const handleAdminPanelClick = () => {
    onOpenAdminPanel?.();
    onClose();
  };

  if (!isOpen) return null;

  return (
    <>
      {/* Main Settings Modal */}
      <div 
        className="fixed inset-0 flex items-center justify-center p-4"
        style={{
          zIndex: 9998,
          backgroundColor: theme === 'dark' ? 'rgba(0, 0, 0, 0.8)' : 'rgba(0, 0, 0, 0.5)'
        }}
      >
        <div 
          className="w-full max-w-md rounded-2xl p-6"
          style={{
            backgroundColor: theme === 'dark' ? '#161A22' : '#FFFFFF',
            border: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.06)' : '1px solid #E6E9EF'
          }}
        >
          {/* Р вЂ”Р В°Р С–Р С•Р В»Р С•Р Р†Р С•Р С” Р СР С•Р Т‘Р В°Р В»РЎРЉР Р…Р С•Р С–Р С• Р С•Р С”Р Р…Р В° */}
          <div className="flex items-center justify-between" style={{ marginBottom: '20px' }}>
            <h3 style={{ 
              color: theme === 'dark' ? '#E8ECF2' : '#0F172A',
              fontSize: '18px',
              lineHeight: '24px',
              fontWeight: 'var(--font-weight-medium)'
            }}>
              Р СњР В°РЎРѓРЎвЂљРЎР‚Р С•Р в„–Р С”Р С‘
          </h3>
            
            {/* Р С™Р Р…Р С•Р С—Р С”Р В° Р В·Р В°Р С”РЎР‚РЎвЂ№РЎвЂљР С‘РЎРЏ - Р С”РЎР‚РЎС“Р С–Р В»Р В°РЎРЏ РЎРѓ Р С‘Р С”Р С•Р Р…Р С”Р С•Р в„– X */}
          <button
            onClick={onClose}
            style={{
                width: '32px', height: '32px',
              borderRadius: '50%',
              backgroundColor: theme === 'dark' ? '#202734' : '#F3F5F8',
                border: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.06)' : '1px solid #E6E9EF',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center'
            }}
          >
              <X style={{ width: '16px', height: '16px' }} />
          </button>
        </div>
          
          {/* Р С™Р С•Р Р…РЎвЂљР ВµР в„–Р Р…Р ВµРЎР‚ Р Р…Р В°РЎРѓРЎвЂљРЎР‚Р С•Р ВµР С” */}
          <div style={{
            backgroundColor: theme === 'dark' ? '#161A22' : '#FFFFFF',
            borderRadius: '16px',
            padding: '0',
            border: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.06)' : '1px solid #E6E9EF',
            overflow: 'hidden'
          }}>
            
            {/* 1. Р СњР С’Р РЋР СћР В Р С›Р в„ўР С™Р С’ Р Р€Р вЂ™Р вЂўР вЂќР С›Р СљР вЂєР вЂўР СњР ВР в„ў */}
            <div style={{
                  height: '64px',
                  padding: '0 16px',
              borderBottom: '1px solid #E6E9EF',
              display: 'flex',
              alignItems: 'center'
            }}>
              {/* Р ВР С”Р С•Р Р…Р С”Р В° Р С”Р С•Р В»Р С•Р С”Р С•Р В»РЎРЉРЎвЂЎР С‘Р С”Р В° Р Р† Р С”РЎР‚РЎС“Р С–Р В»Р С•Р С Р С”Р С•Р Р…РЎвЂљР ВµР в„–Р Р…Р ВµРЎР‚Р Вµ */}
              <div style={{
                width: '28px', height: '28px',
                borderRadius: '50%',
                backgroundColor: theme === 'dark' ? '#0F1116' : '#FFFFFF',
                border: theme === 'dark' ? '1px solid #2A2F36' : '1px solid #E6E9EF',
                display: 'flex', alignItems: 'center', justifyContent: 'center'
              }}>
                <Bell style={{ width: '18px', height: '18px' }} />
              </div>
              
              {/* Р СћР ВµР С”РЎРѓРЎвЂљР С•Р Р†РЎвЂ№Р в„– Р В±Р В»Р С•Р С” */}
              <div className="flex-1" style={{ marginLeft: '12px' }}>
                <div style={{ fontSize: '16px', color: theme === 'dark' ? '#E8ECF2' : '#0F172A' }}>
                  Р Р€Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ
                </div>
                <div style={{ fontSize: '14px', color: theme === 'dark' ? '#A7B0BD' : '#6B7280' }}>
                  Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏР СР С‘
                </div>
              </div>
              
              {/* Р СћРЎС“Р СР В±Р В»Р ВµРЎР‚ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р в„– */}
              <label style={{ position: 'relative', display: 'inline-flex', alignItems: 'center', cursor: 'pointer' }}>
                <input
                  type="checkbox"
                  checked={notifications}
                  onChange={(e) => handleNotificationsChange(e.target.checked)}
                  style={{ position: 'absolute', opacity: 0, cursor: 'pointer' }}
                />
                <div style={{
                  width: '44px',
                  height: '24px',
                  backgroundColor: notifications ? '#2B82FF' : '#E5E7EB',
                  borderRadius: '12px',
                  position: 'relative',
                  transition: 'background-color 0.3s ease'
                }}>
                  <div style={{
                    position: 'absolute',
                    top: '2px',
                    left: notifications ? '22px' : '2px',
                    width: '20px',
                    height: '20px',
                    backgroundColor: '#FFFFFF',
                    borderRadius: '50%',
                    transition: 'left 0.3s ease',
                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
                  }} />
                </div>
              </label>
                </div>
                
            {/* 2. Р СњР С’Р РЋР СћР В Р С›Р в„ўР С™Р С’ Р СћР вЂўР СљР В« (Р РЋР вЂўР С™Р В Р вЂўР СћР СњР С’Р Р‡ Р В¤Р Р€Р СњР С™Р В¦Р ВР Р‡) */}
            <div style={{
              height: '64px',
              padding: '0 16px',
              borderBottom: '1px solid #E6E9EF',
              display: 'flex',
              alignItems: 'center'
            }}>
              {/* Р ВР С”Р С•Р Р…Р С”Р В° Р С—Р В°Р В»Р С‘РЎвЂљРЎР‚РЎвЂ№ Р Р† Р С”РЎР‚РЎС“Р С–Р В»Р С•Р С Р С”Р С•Р Р…РЎвЂљР ВµР в„–Р Р…Р ВµРЎР‚Р Вµ */}
              <div style={{
                width: '28px', height: '28px',
                borderRadius: '50%',
                backgroundColor: theme === 'dark' ? '#0F1116' : '#FFFFFF',
                border: theme === 'dark' ? '1px solid #2A2F36' : '1px solid #E6E9EF',
                display: 'flex', alignItems: 'center', justifyContent: 'center'
              }}>
                <Palette style={{ width: '18px', height: '18px' }} />
                  </div>
              
              {/* Р СћР ВµР С”РЎРѓРЎвЂљР С•Р Р†РЎвЂ№Р в„– Р В±Р В»Р С•Р С” */}
              <div className="flex-1" style={{ marginLeft: '12px' }}>
                <div style={{ fontSize: '16px', color: theme === 'dark' ? '#E8ECF2' : '#0F172A' }}>
                  Р СћР ВµР СР В°
                </div>
                <div style={{ fontSize: '14px', color: theme === 'dark' ? '#A7B0BD' : '#6B7280' }}>
                  Р СџР ВµРЎР‚Р ВµР С”Р В»РЎР‹РЎвЂЎР ВµР Р…Р С‘Р Вµ РЎвЂљР ВµР СРЎвЂ№ Р С—РЎР‚Р С‘Р В»Р С•Р В¶Р ВµР Р…Р С‘РЎРЏ
                  </div>
              </div>
              
              {/* Р СћРЎС“Р СР В±Р В»Р ВµРЎР‚ РЎвЂљР ВµР СРЎвЂ№ - РЎРѓР ВµР С”РЎР‚Р ВµРЎвЂљР Р…Р В°РЎРЏ РЎвЂћРЎС“Р Р…Р С”РЎвЂ Р С‘РЎРЏ */}
              <label style={{ position: 'relative', display: 'inline-flex', alignItems: 'center', cursor: 'pointer' }}>
                <input
                  type="checkbox"
                  checked={theme === 'dark'}
                  onChange={handleThemeToggle}
                  style={{ position: 'absolute', opacity: 0, cursor: 'pointer' }}
                />
                <div style={{
                  width: '44px',
                  height: '24px',
                  backgroundColor: theme === 'dark' ? '#2B82FF' : '#E5E7EB',
                  borderRadius: '12px',
                  position: 'relative',
                  transition: 'background-color 0.3s ease'
                }}>
                  <div style={{
                    position: 'absolute',
                    top: '2px',
                    left: theme === 'dark' ? '22px' : '2px',
                    width: '20px',
                    height: '20px',
                    backgroundColor: '#FFFFFF',
                    borderRadius: '50%',
                    transition: 'left 0.3s ease',
                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)'
                  }} />
                </div>
              </label>
            </div>

            {/* 3. Р РЋР С›Р С›Р вЂР В©Р ВР СћР В¬ Р С› Р СџР В Р С›Р вЂР вЂєР вЂўР СљР вЂў */}
            <button 
              onClick={() => {
                onOpenProblemReport?.();
                onClose();
              }}
              style={{
                height: '64px',
                padding: '0 16px',
                width: '100%',
                display: 'flex',
                alignItems: 'center',
                backgroundColor: 'transparent',
                border: 'none',
                cursor: 'pointer'
              }}
            >
              {/* Р ВР С”Р С•Р Р…Р С”Р В° РЎРѓР С•Р С•Р В±РЎвЂ°Р ВµР Р…Р С‘РЎРЏ Р Р† Р С”РЎР‚РЎС“Р С–Р В»Р С•Р С Р С”Р С•Р Р…РЎвЂљР ВµР в„–Р Р…Р ВµРЎР‚Р Вµ */}
              <div style={{
                width: '28px', height: '28px',
                  borderRadius: '50%',
                  backgroundColor: theme === 'dark' ? '#0F1116' : '#FFFFFF',
                border: theme === 'dark' ? '1px solid #2A2F36' : '1px solid #E6E9EF',
                display: 'flex', alignItems: 'center', justifyContent: 'center'
              }}>
                <MessageCircle style={{ width: '18px', height: '18px' }} />
              </div>
              
              {/* Р СћР ВµР С”РЎРѓРЎвЂљР С•Р Р†РЎвЂ№Р в„– Р В±Р В»Р С•Р С” */}
              <div className="flex-1" style={{ marginLeft: '12px', textAlign: 'left' }}>
                <div style={{ fontSize: '16px', color: theme === 'dark' ? '#E8ECF2' : '#0F172A' }}>
                  Р РЋР С•Р С•Р В±РЎвЂ°Р С‘РЎвЂљРЎРЉ Р С• Р С—РЎР‚Р С•Р В±Р В»Р ВµР СР Вµ
                </div>
                <div style={{ fontSize: '14px', color: theme === 'dark' ? '#A7B0BD' : '#6B7280' }}>
                  Р С›РЎвЂљР С—РЎР‚Р В°Р Р†Р С‘РЎвЂљРЎРЉ Р С•РЎвЂљРЎвЂЎР ВµРЎвЂљ РЎР‚Р В°Р В·РЎР‚Р В°Р В±Р С•РЎвЂљРЎвЂЎР С‘Р С”Р В°Р С
                </div>
              </div>
            </button>

            {/* 4. Р С™Р СњР С›Р СџР С™Р С’ Р С’Р вЂќР СљР ВР Сњ Р СџР С’Р СњР вЂўР вЂєР В (Р СџР С›Р Р‡Р вЂ™Р вЂєР Р‡Р вЂўР СћР РЋР Р‡ Р СћР С›Р вЂєР В¬Р С™Р С› Р вЂќР вЂєР Р‡ Р С’Р вЂќР СљР ВР СњР С›Р вЂ™/Р СћР ВР СљР вЂєР ВР вЂќР С›Р вЂ™) */}
            {canAccessAdminPanel && (
              <button 
                onClick={handleAdminPanelClick}
                  style={{ 
                  height: '64px',
                  padding: '0 16px',
                  width: '100%',
                  display: 'flex',
                  alignItems: 'center',
                  backgroundColor: 'transparent',
                  border: 'none',
                  cursor: 'pointer'
                }}
              >
                {/* Р ВР С”Р С•Р Р…Р С”Р В° РЎвЂ°Р С‘РЎвЂљР В° Р Р† Р С”РЎР‚РЎС“Р С–Р В»Р С•Р С Р С”Р С•Р Р…РЎвЂљР ВµР в„–Р Р…Р ВµРЎР‚Р Вµ */}
                <div style={{
                  width: '28px', height: '28px',
                  borderRadius: '50%',
                  backgroundColor: theme === 'dark' ? '#0F1116' : '#FFFFFF',
                  border: theme === 'dark' ? '1px solid #2A2F36' : '1px solid #E6E9EF',
                  display: 'flex', alignItems: 'center', justifyContent: 'center'
                }}>
                  <Shield style={{ width: '18px', height: '18px' }} />
                </div>
                
                {/* Р СћР ВµР С”РЎРѓРЎвЂљР С•Р Р†РЎвЂ№Р в„– Р В±Р В»Р С•Р С” */}
                <div className="flex-1" style={{ marginLeft: '12px', textAlign: 'left' }}>
                  <div style={{ fontSize: '16px', color: theme === 'dark' ? '#E8ECF2' : '#0F172A' }}>
                    Р С’Р Т‘Р СР С‘Р Р… Р С—Р В°Р Р…Р ВµР В»РЎРЉ
                  </div>
                  <div style={{ fontSize: '14px', color: theme === 'dark' ? '#A7B0BD' : '#6B7280' }}>
                    {userRole === 'team_lead' ? 'Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С”Р С•Р СР В°Р Р…Р Т‘Р С•Р в„–' : 
                     userRole === 'junior_admin' ? 'Р СљР С•Р Т‘Р ВµРЎР‚Р В°РЎвЂ Р С‘РЎРЏ Р С‘ РЎРѓРЎвЂљР В°РЎвЂљР С‘РЎРѓРЎвЂљР С‘Р С”Р В°' :
                     userRole === 'senior_admin' ? 'Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏР СР С‘ Р С‘ Р С”Р С•Р Р…РЎвЂљР ВµР Р…РЎвЂљР С•Р С' :
                     userRole === 'main_admin' ? 'Р СџР С•Р В»Р Р…Р С•Р Вµ РЎС“Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ РЎРѓР С‘РЎРѓРЎвЂљР ВµР СР С•Р в„–' :
                     'Р С’Р Т‘Р СР С‘Р Р…Р С‘РЎРѓРЎвЂљРЎР‚Р В°РЎвЂљР С‘Р Р†Р Р…РЎвЂ№Р Вµ РЎвЂћРЎС“Р Р…Р С”РЎвЂ Р С‘Р С‘'}
              </div>
            </div>
                
                {/* Р РЋРЎвЂљРЎР‚Р ВµР В»Р С”Р В° Р Р†Р С—РЎР‚Р В°Р Р†Р С• Р Р†Р СР ВµРЎРѓРЎвЂљР С• РЎвЂљРЎС“Р СР В±Р В»Р ВµРЎР‚Р В° */}
                <div className="w-5 h-5 flex items-center justify-center">
                  <ChevronRight style={{ width: '16px', height: '16px' }} />
                </div>
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Report Modal */}
      {reportModalOpen && (
        <div 
          className="fixed inset-0 flex items-center justify-center p-4"
              style={{
            zIndex: 9999,
            backgroundColor: theme === 'dark' ? 'rgba(0, 0, 0, 0.8)' : 'rgba(0, 0, 0, 0.5)'
          }}
        >
          <div 
            className="w-full max-w-md rounded-2xl p-6"
              style={{
              backgroundColor: theme === 'dark' ? '#161A22' : '#FFFFFF',
              border: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.06)' : '1px solid #E6E9EF'
            }}
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Р РЋР С•Р С•Р В±РЎвЂ°Р С‘РЎвЂљРЎРЉ Р С• Р С—РЎР‚Р С•Р В±Р В»Р ВµР СР Вµ</h3>
              <button 
                onClick={() => setReportModalOpen(false)}
                className="w-8 h-8 rounded-full flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <X className="w-4 h-4" />
            </button>
          </div>

            <textarea
              value={reportText}
              onChange={(e) => setReportText(e.target.value)}
              placeholder="Р С›Р С—Р С‘РЎв‚¬Р С‘РЎвЂљР Вµ Р С—РЎР‚Р С•Р В±Р В»Р ВµР СРЎС“ Р С—Р С•Р Т‘РЎР‚Р С•Р В±Р Р…Р С•..."
              rows={4}
              style={{ height: '88px', borderRadius: '12px' }}
              className="w-full p-3 border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            />

            <div className="flex items-center gap-2 mb-4">
              <div className="flex-1 p-3 rounded-lg border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800">
                <span className="text-sm text-gray-600 dark:text-gray-400">
                  {selectedFile ? selectedFile.name : 'Р В¤Р В°Р в„–Р В» Р Р…Р Вµ Р Р†РЎвЂ№Р В±РЎР‚Р В°Р Р…'}
                </span>
              </div>
              <div className="relative">
                <input
                  type="file"
                  accept="image/*,video/*,.pdf,.doc,.docx"
                  onChange={handleFileSelect}
                  className="absolute inset-0 opacity-0 cursor-pointer"
                />
                <button className="p-3 rounded-lg bg-primary text-white">
                  <Paperclip style={{ width: '18px', height: '18px' }} />
                </button>
              </div>
            </div>

            <div className="flex gap-3">
              <button 
                onClick={() => setReportModalOpen(false)}
                className="flex-1 px-4 py-2 rounded-xl border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
              >
                Р С›РЎвЂљР СР ВµР Р…Р С‘РЎвЂљРЎРЉ
              </button>
              <button 
                onClick={handleReportSubmit}
                disabled={!reportText.trim()}
                style={{
                  backgroundColor: reportText.trim() ? '#2B82FF' : '#E6E9EF',
                  cursor: reportText.trim() ? 'pointer' : 'not-allowed',
                  color: '#FFFFFF'
                }}
                className="flex-1 px-4 py-2 rounded-xl transition-colors"
              >
                Р С›РЎвЂљР С—РЎР‚Р В°Р Р†Р С‘РЎвЂљРЎРЉ
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Secret Admin Code Modal */}
      {secretCodeModalOpen && (
        <div 
          className="fixed inset-0 flex items-center justify-center p-4"
          style={{
            zIndex: 10000,
            backgroundColor: theme === 'dark' ? 'rgba(0, 0, 0, 0.9)' : 'rgba(0, 0, 0, 0.7)'
          }}
        >
          <div 
            className="w-full max-w-md rounded-2xl p-6"
            style={{
              backgroundColor: theme === 'dark' ? '#161A22' : '#FFFFFF',
              border: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.06)' : '1px solid #E6E9EF'
            }}
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <Shield className="w-5 h-5 text-blue-600" />
                Р С’Р Т‘Р СР С‘Р Р… Р С—Р В°Р Р…Р ВµР В»РЎРЉ
              </h3>
              <button 
                onClick={() => setSecretCodeModalOpen(false)}
                className="w-8 h-8 rounded-full flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-800"
              >
                <X className="w-4 h-4" />
              </button>
            </div>

            {/* Р СџР С•Р В»Р Вµ Telegram ID */}
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Telegram ID</label>
            <input
              type="text"
              value={telegramId}
              onChange={(e) => setTelegramId(e.target.value)}
                placeholder="Р вЂ™Р Р†Р ВµР Т‘Р С‘РЎвЂљР Вµ Р Р†Р В°РЎв‚¬ Telegram ID"
                className="w-full p-3 rounded-xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          
            {/* Р СџР С•Р В»Р Вµ Р С”Р С•Р Т‘Р В° Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В° РЎРѓ Р С—Р С•Р С”Р В°Р В·Р С•Р С/РЎРѓР С”РЎР‚РЎвЂ№РЎвЂљР С‘Р ВµР С */}
            <div className="mb-4">
              <label className="block text-sm font-medium mb-2">Р С™Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°</label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                value={secretCode}
                onChange={(e) => setSecretCode(e.target.value)}
                  placeholder="Р вЂ™Р Р†Р ВµР Т‘Р С‘РЎвЂљР Вµ Р С”Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°"
                  className="w-full p-3 pr-12 rounded-xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 -translate-y-1/2 p-1"
              >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
              </button>
            </div>
          </div>
          
            <div className="text-center text-xs text-muted mb-4">
              Р вЂќР С•РЎРѓРЎвЂљРЎС“Р С— РЎвЂљР С•Р В»РЎРЉР С”Р С• Р Т‘Р В»РЎРЏ Р В°Р Т‘Р СР С‘Р Р…Р С‘РЎРѓРЎвЂљРЎР‚Р В°РЎвЂљР С•РЎР‚Р С•Р Р† Р С‘ РЎвЂљР С‘Р СР В»Р С‘Р Т‘Р С•Р Р†
            </div>

            <button 
              onClick={handleSecretCodeSubmit}
              disabled={!telegramId || !secretCode}
            style={{ 
                backgroundColor: (telegramId && secretCode) ? '#2B82FF' : '#E6E9EF',
                cursor: (telegramId && secretCode) ? 'pointer' : 'not-allowed',
                color: '#FFFFFF'
            }}
              className="w-full px-4 py-3 rounded-xl transition-colors flex items-center justify-center gap-2"
          >
              <Shield style={{ width: '18px', height: '18px' }} />
              Р вЂ™Р С•Р в„–РЎвЂљР С‘ Р Р† Р В°Р Т‘Р СР С‘Р Р…Р С”РЎС“
            </button>
          </div>
        </div>
      )}
    </>
  );
};