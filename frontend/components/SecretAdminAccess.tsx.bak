import React, { useState, useEffect } from 'react';
import { Shield, Eye, EyeOff, X } from 'lucide-react';

interface SecretAdminAccessProps {
  isOpen: boolean;
  onClose: () => void;
  onAccessGranted: (role: string) => void;
  theme: 'light' | 'dark';
}

// Р С™Р С•Р Т‘РЎвЂ№ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В° Р Т‘Р В»РЎРЏ РЎР‚Р В°Р В·Р Р…РЎвЂ№РЎвЂ¦ РЎР‚Р С•Р В»Р ВµР в„–
const ADMIN_CODES = {
  'df1GE%LwVAAC': 'Р вЂњР В»Р В°Р Р†Р Р…РЎвЂ№Р в„– Р С’Р Т‘Р СР С‘Р Р…',
  '0caFyNh}w%': 'Р РЋРЎвЂљР В°РЎР‚РЎв‚¬Р С‘Р в„– Р С’Р Т‘Р СР С‘Р Р…', 
  '~3SogEhz': 'Р СљР В»Р В°Р Т‘РЎв‚¬Р С‘Р в„– Р С’Р Т‘Р СР С‘Р Р…',
  'SToU{~': 'Р СћР С‘Р СР В»Р С‘Р Т‘'
};

export const SecretAdminAccess: React.FC<SecretAdminAccessProps> = ({
  isOpen,
  onClose,
  onAccessGranted,
  theme
}) => {
  const [telegramId, setTelegramId] = useState('');
  const [accessCode, setAccessCode] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [error, setError] = useState('');

  // Р С›РЎвЂЎР С‘РЎРѓРЎвЂљР С”Р В° РЎвЂћР С•РЎР‚Р СРЎвЂ№ Р С—РЎР‚Р С‘ Р С•РЎвЂљР С”РЎР‚РЎвЂ№РЎвЂљР С‘Р С‘/Р В·Р В°Р С”РЎР‚РЎвЂ№РЎвЂљР С‘Р С‘
  useEffect(() => {
    if (isOpen) {
      setTelegramId('');
      setAccessCode('');
      setError('');
      setShowPassword(false);
    }
  }, [isOpen]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Р СџРЎР‚Р С•Р Р†Р ВµРЎР‚РЎРЏР ВµР С, РЎвЂЎРЎвЂљР С• Р С•Р В±Р В° Р С—Р С•Р В»РЎРЏ Р В·Р В°Р С—Р С•Р В»Р Р…Р ВµР Р…РЎвЂ№
    if (!telegramId.trim() || !accessCode.trim()) {
      setError('Р вЂ”Р В°Р С—Р С•Р В»Р Р…Р С‘РЎвЂљР Вµ Р Р†РЎРѓР Вµ Р С—Р С•Р В»РЎРЏ');
      return;
    }
    
    // Р СџРЎР‚Р С•Р Р†Р ВµРЎР‚РЎРЏР ВµР С Р С”Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°
    const role = ADMIN_CODES[accessCode as keyof typeof ADMIN_CODES];
    
    if (role) {
      // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…РЎРЏР ВµР С РЎР‚Р С•Р В»РЎРЉ Р Р† localStorage (РЎРѓР В±РЎР‚Р С•РЎРѓР С‘РЎвЂљРЎРѓРЎРЏ Р С—РЎР‚Р С‘ Р В·Р В°Р С”РЎР‚РЎвЂ№РЎвЂљР С‘Р С‘ Р С—РЎР‚Р С‘Р В»Р С•Р В¶Р ВµР Р…Р С‘РЎРЏ)
      localStorage.setItem('adminRole', role);
      localStorage.setItem('adminCode', accessCode);
      localStorage.setItem('adminTelegramId', telegramId);
      
      // Р вЂ™РЎвЂ№Р В·РЎвЂ№Р Р†Р В°Р ВµР С callback Р Т‘Р В»РЎРЏ Р В°Р С”РЎвЂљР С‘Р Р†Р В°РЎвЂ Р С‘Р С‘ РЎР‚Р С•Р В»Р С‘
      onAccessGranted(role);
      
      // Р вЂ”Р В°Р С”РЎР‚РЎвЂ№Р Р†Р В°Р ВµР С Р СР С•Р Т‘Р В°Р В»РЎРЉР Р…Р С•Р Вµ Р С•Р С”Р Р…Р С•
      onClose();
      
      // Р С›РЎвЂЎР С‘РЎвЂ°Р В°Р ВµР С РЎвЂћР С•РЎР‚Р СРЎС“
      setTelegramId('');
      setAccessCode('');
      setError('');
    } else {
      setError('Р СњР ВµР Р†Р ВµРЎР‚Р Р…РЎвЂ№Р в„– Р С”Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°');
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setAccessCode(e.target.value);
    setError(''); // Р С›РЎвЂЎР С‘РЎвЂ°Р В°Р ВµР С Р С•РЎв‚¬Р С‘Р В±Р С”РЎС“ Р С—РЎР‚Р С‘ Р Р†Р Р†Р С•Р Т‘Р Вµ
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-[100] flex items-center justify-center">
      {/* Backdrop */}
      <div 
        className="absolute inset-0"
        style={{
          backgroundColor: theme === 'dark' ? 'rgba(0, 0, 0, 0.8)' : 'rgba(0, 0, 0, 0.5)',
          backdropFilter: 'blur(8px)',
          WebkitBackdropFilter: 'blur(8px)'
        }}
        onClick={onClose}
      />
      
      {/* Modal */}
      <div 
        className="relative w-full max-w-sm mx-4 rounded-2xl p-6"
        style={{
          backgroundColor: theme === 'dark' ? '#1C2029' : '#FFFFFF',
          border: theme === 'dark' ? '1px solid rgba(255, 255, 255, 0.1)' : '1px solid #E6E9EF',
          boxShadow: theme === 'dark' 
            ? '0 20px 60px rgba(0, 0, 0, 0.8)' 
            : '0 20px 60px rgba(0, 0, 0, 0.15)'
        }}
      >
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <h2 
            style={{
              fontSize: '18px',
              fontWeight: '500',
              color: theme === 'dark' ? '#E8ECF2' : '#0F172A'
            }}
          >
            Р С’Р Т‘Р СР С‘Р Р… Р С—Р В°Р Р…Р ВµР В»РЎРЉ
          </h2>
          
          <button
            onClick={onClose}
            className="w-8 h-8 rounded-full flex items-center justify-center transition-all hover:scale-105"
            style={{
              backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)'
            }}
          >
            <X style={{ width: '16px', height: '16px' }} />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Telegram ID Input */}
          <div>
            <label 
              className="block mb-2"
              style={{
                fontSize: '12px',
                fontWeight: '500',
                color: theme === 'dark' ? '#E8ECF2' : '#0F172A'
              }}
            >
              Telegram ID
            </label>
            
            <input
              type="text"
              value={telegramId}
              onChange={(e) => setTelegramId(e.target.value)}
              placeholder="Р вЂ™Р Р†Р ВµР Т‘Р С‘РЎвЂљР Вµ Р Р†Р В°РЎв‚¬ Telegram ID"
              className="w-full px-4 py-3 rounded-xl border transition-all focus:outline-none focus:ring-2"
              style={{
                backgroundColor: theme === 'dark' ? '#161A22' : '#F3F5F8',
                borderColor: theme === 'dark' 
                  ? 'rgba(255, 255, 255, 0.1)' 
                  : '#E6E9EF',
                color: theme === 'dark' ? '#E8ECF2' : '#0F172A',
                fontSize: '12px'
              }}
            />
          </div>

          {/* Access Code Input */}
          <div>
            <label 
              className="block mb-2"
              style={{
                fontSize: '12px',
                fontWeight: '500',
                color: theme === 'dark' ? '#E8ECF2' : '#0F172A'
              }}
            >
              Р С™Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°
            </label>
            
            <div className="relative">
              <input
                type={showPassword ? 'text' : 'password'}
                value={accessCode}
                onChange={handleInputChange}
                placeholder="Р вЂ™Р Р†Р ВµР Т‘Р С‘РЎвЂљР Вµ Р С”Р С•Р Т‘ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°"
                className="w-full px-4 py-3 rounded-xl border transition-all focus:outline-none focus:ring-2"
                style={{
                  backgroundColor: theme === 'dark' ? '#161A22' : '#F3F5F8',
                  borderColor: error 
                    ? '#ff3b30' 
                    : theme === 'dark' 
                      ? 'rgba(255, 255, 255, 0.1)' 
                      : '#E6E9EF',
                  color: theme === 'dark' ? '#E8ECF2' : '#0F172A',
                  fontSize: '12px'
                }}
                autoFocus
              />
              
              {/* Show/Hide Password Button */}
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-1/2 transform -translate-y-1/2 w-6 h-6 flex items-center justify-center rounded-full transition-all hover:scale-105"
                style={{
                  backgroundColor: theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)'
                }}
              >
                {showPassword ? (
                  <EyeOff style={{ width: '14px', height: '14px' }} />
                ) : (
                  <Eye style={{ width: '14px', height: '14px' }} />
                )}
              </button>
            </div>
            
            {/* Error Message */}
            {error && (
              <p 
                className="mt-2"
                style={{
                  fontSize: '10px',
                  color: '#ff3b30'
                }}
              >
                {error}
              </p>
            )}
          </div>

          {/* Info Text */}
          <p 
            className="text-center"
            style={{
              fontSize: '10px',
              color: theme === 'dark' ? '#A7B0BD' : '#6B7280',
              lineHeight: '1.4'
            }}
          >
            Р вЂќР С•РЎРѓРЎвЂљРЎС“Р С— РЎвЂљР С•Р В»РЎРЉР С”Р С• Р Т‘Р В»РЎРЏ Р В°Р Т‘Р СР С‘Р Р…Р С‘РЎРѓРЎвЂљРЎР‚Р В°РЎвЂљР С•РЎР‚Р С•Р Р† Р С‘ РЎвЂљР С‘Р СР В»Р С‘Р Т‘Р С•Р Р†
          </p>

          {/* Submit Button */}
          <button
            type="submit"
            className="w-full py-3 px-4 rounded-xl flex items-center justify-center gap-2 transition-all hover:scale-[1.02] disabled:opacity-50"
            style={{
              backgroundColor: (telegramId.trim() && accessCode.trim()) ? '#2B82FF' : '#202734',
              color: '#FFFFFF',
              fontSize: '12px',
              fontWeight: '500'
            }}
            disabled={!telegramId.trim() || !accessCode.trim()}
          >
            <Shield style={{ width: '16px', height: '16px' }} />
            Р вЂ™Р С•Р в„–РЎвЂљР С‘ Р Р† Р В°Р Т‘Р СР С‘Р Р…Р С”РЎС“
          </button>
        </form>
      </div>
    </div>
  );
};
