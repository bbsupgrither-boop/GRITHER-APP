import { useState, useEffect } from 'react';
import { 
  UserWithRole, 
  UserRole, 
  getUserById, 
  hasPermission, 
  hasRole, 
  getTeamMembers,
  getTeamByTeamLeadId 
} from '../types/userRoles';

interface UseUserRoleReturn {
  user: UserWithRole | null;
  userRole: UserRole | null;
  hasPermission: (permission: string) => boolean;
  hasRole: (role: UserRole) => boolean;
  canAccessAdminPanel: boolean;
  teamMembers: UserWithRole[];
  isLoading: boolean;
}

export const useUserRole = (userId: string): UseUserRoleReturn => {
  const [user, setUser] = useState<UserWithRole | null>(null);
  const [userRole, setUserRole] = useState<UserRole | null>(null);
  const [teamMembers, setTeamMembers] = useState<UserWithRole[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (!userId) {
      setIsLoading(false);
      return;
    }

    // Р СџР С•Р В»РЎС“РЎвЂЎР В°Р ВµР С Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ Р С‘Р В· Р В±Р В°Р В·РЎвЂ№ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦
    const userData = getUserById(userId);
    
    if (userData) {
      setUser(userData);
      setUserRole(userData.role);
      
      // Р вЂўРЎРѓР В»Р С‘ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЉ РЎвЂљР С‘Р СР В»Р С‘Р Т‘, Р С—Р С•Р В»РЎС“РЎвЂЎР В°Р ВµР С Р ВµР С–Р С• Р С”Р С•Р СР В°Р Р…Р Т‘РЎС“
      if (userData.role === 'team_lead') {
        const team = getTeamByTeamLeadId(userId);
        if (team) {
          setTeamMembers([team.teamLead, ...team.workers]);
        }
      }
    } else {
      setUser(null);
      setUserRole(null);
      setTeamMembers([]);
    }
    
    setIsLoading(false);
  }, [userId]);

  // Р В¤РЎС“Р Р…Р С”РЎвЂ Р С‘РЎРЏ Р С—РЎР‚Р С•Р Р†Р ВµРЎР‚Р С”Р С‘ Р С—РЎР‚Р В°Р Р† Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В°
  const checkPermission = (permission: string): boolean => {
    if (!user) return false;
    return hasPermission(userId, permission);
  };

  // Р В¤РЎС“Р Р…Р С”РЎвЂ Р С‘РЎРЏ Р С—РЎР‚Р С•Р Р†Р ВµРЎР‚Р С”Р С‘ РЎР‚Р С•Р В»Р С‘
  const checkRole = (role: UserRole): boolean => {
    if (!user) return false;
    return hasRole(userId, role);
  };

  // Р СџРЎР‚Р С•Р Р†Р ВµРЎР‚Р С”Р В° Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В° Р С” Р В°Р Т‘Р СР С‘Р Р… Р С—Р В°Р Р…Р ВµР В»Р С‘
  const canAccessAdminPanel = userRole !== null && 
    ['team_lead', 'junior_admin', 'senior_admin', 'main_admin'].includes(userRole);

  return {
    user,
    userRole,
    hasPermission: checkPermission,
    hasRole: checkRole,
    canAccessAdminPanel,
    teamMembers,
    isLoading
  };
};
