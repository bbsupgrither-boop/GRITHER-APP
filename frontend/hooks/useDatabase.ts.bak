import { useState, useEffect, useCallback } from 'react';
import { databaseService, UserData, AchievementData, TaskData, NotificationData, BattleData } from '../services/database';

interface UseDatabaseReturn {
  user: UserData | null;
  achievements: AchievementData[];
  tasks: TaskData[];
  notifications: NotificationData[];
  stats: any;
  isLoading: boolean;
  error: string | null;
  
  // Р СљР ВµРЎвЂљР С•Р Т‘РЎвЂ№
  createUser: (telegramId: string, name: string, role: UserData['role'], teamNumber?: number) => UserData | null;
  updateUser: (telegramId: string, updates: Partial<UserData>) => boolean;
  updateProgress: (telegramId: string, progress: Partial<Pick<UserData, 'level' | 'experience' | 'gCoins' | 'tasksCompleted'>>) => boolean;
  addAchievement: (telegramId: string, achievementId: string) => boolean;
  saveTask: (task: TaskData) => boolean;
  updateTask: (telegramId: string, taskId: string, updates: Partial<TaskData>) => boolean;
  saveNotification: (notification: NotificationData) => boolean;
  markNotificationAsRead: (telegramId: string, notificationId: string) => boolean;
  refreshData: () => void;
}

export const useDatabase = (telegramId: string): UseDatabaseReturn => {
  const [user, setUser] = useState<UserData | null>(null);
  const [achievements, setAchievements] = useState<AchievementData[]>([]);
  const [tasks, setTasks] = useState<TaskData[]>([]);
  const [notifications, setNotifications] = useState<NotificationData[]>([]);
  const [stats, setStats] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Р вЂ”Р В°Р С–РЎР‚РЎС“Р В·Р С”Р В° Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  const loadUserData = useCallback(async () => {
    if (!telegramId) {
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      // Р СџР С•Р В»РЎС“РЎвЂЎР В°Р ВµР С Р Т‘Р В°Р Р…Р Р…РЎвЂ№Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
      const userData = databaseService.getUser(telegramId);
      setUser(userData);

      // Р СџР С•Р В»РЎС“РЎвЂЎР В°Р ВµР С Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ
      const userAchievements = databaseService.getUserAchievements(telegramId);
      setAchievements(userAchievements);

      // Р СџР С•Р В»РЎС“РЎвЂЎР В°Р ВµР С Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘
      const userTasks = databaseService.getUserTasks(telegramId);
      setTasks(userTasks);

      // Р СџР С•Р В»РЎС“РЎвЂЎР В°Р ВµР С РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ
      const userNotifications = databaseService.getUserNotifications(telegramId);
      setNotifications(userNotifications);

      // Р СџР С•Р В»РЎС“РЎвЂЎР В°Р ВµР С РЎРѓРЎвЂљР В°РЎвЂљР С‘РЎРѓРЎвЂљР С‘Р С”РЎС“
      const userStats = databaseService.getUserStats(telegramId);
      setStats(userStats);

    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р В·Р В°Р С–РЎР‚РЎС“Р В·Р С”Р С‘ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р В·Р В°Р С–РЎР‚РЎС“Р В·Р С”Р С‘ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ');
    } finally {
      setIsLoading(false);
    }
  }, [telegramId]);

  // Р С’Р Р†РЎвЂљР С•Р СР В°РЎвЂљР С‘РЎвЂЎР ВµРЎРѓР С”Р В°РЎРЏ Р В·Р В°Р С–РЎР‚РЎС“Р В·Р С”Р В° Р С—РЎР‚Р С‘ Р С‘Р В·Р СР ВµР Р…Р ВµР Р…Р С‘Р С‘ telegramId
  useEffect(() => {
    loadUserData();
  }, [loadUserData]);

  // Р С’Р Р†РЎвЂљР С•РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘Р Вµ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  useEffect(() => {
    if (user) {
      const saveTimeout = setTimeout(() => {
        databaseService.saveUser(user);
      }, 2000); // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…РЎРЏР ВµР С РЎвЂЎР ВµРЎР‚Р ВµР В· 2 РЎРѓР ВµР С”РЎС“Р Р…Р Т‘РЎвЂ№ Р С—Р С•РЎРѓР В»Р Вµ Р С‘Р В·Р СР ВµР Р…Р ВµР Р…Р С‘Р в„–

      return () => clearTimeout(saveTimeout);
    }
  }, [user]);

  // Р РЋР С•Р В·Р Т‘Р В°Р Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  const createUser = useCallback((telegramId: string, name: string, role: UserData['role'], teamNumber?: number): UserData | null => {
    try {
      const newUser = databaseService.createUser(telegramId, name, role, teamNumber);
      setUser(newUser);
      return newUser;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•Р В·Р Т‘Р В°Р Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•Р В·Р Т‘Р В°Р Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ');
      return null;
    }
  }, []);

  // Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  const updateUser = useCallback((telegramId: string, updates: Partial<UserData>): boolean => {
    try {
      const currentUser = databaseService.getUser(telegramId);
      if (!currentUser) return false;

      const updatedUser = { ...currentUser, ...updates };
      const success = databaseService.saveUser(updatedUser);
      
      if (success) {
        setUser(updatedUser);
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ');
      return false;
    }
  }, []);

  // Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—РЎР‚Р С•Р С–РЎР‚Р ВµРЎРѓРЎРѓР В°
  const updateProgress = useCallback((telegramId: string, progress: Partial<Pick<UserData, 'level' | 'experience' | 'gCoins' | 'tasksCompleted'>>): boolean => {
    try {
      const success = databaseService.updateUserProgress(telegramId, progress);
      
      if (success) {
        // Р С›Р В±Р Р…Р С•Р Р†Р В»РЎРЏР ВµР С Р В»Р С•Р С”Р В°Р В»РЎРЉР Р…Р С•Р Вµ РЎРѓР С•РЎРѓРЎвЂљР С•РЎРЏР Р…Р С‘Р Вµ
        const updatedUser = databaseService.getUser(telegramId);
        if (updatedUser) {
          setUser(updatedUser);
          setStats(databaseService.getUserStats(telegramId));
        }
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р С—РЎР‚Р С•Р С–РЎР‚Р ВµРЎРѓРЎРѓР В°:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р С—РЎР‚Р С•Р С–РЎР‚Р ВµРЎРѓРЎРѓР В°');
      return false;
    }
  }, []);

  // Р вЂќР С•Р В±Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ
  const addAchievement = useCallback((telegramId: string, achievementId: string): boolean => {
    try {
      const success = databaseService.addUserAchievement(telegramId, achievementId);
      
      if (success) {
        // Р С›Р В±Р Р…Р С•Р Р†Р В»РЎРЏР ВµР С Р В»Р С•Р С”Р В°Р В»РЎРЉР Р…Р С•Р Вµ РЎРѓР С•РЎРѓРЎвЂљР С•РЎРЏР Р…Р С‘Р Вµ
        setUser(databaseService.getUser(telegramId));
        setAchievements(databaseService.getUserAchievements(telegramId));
        setStats(databaseService.getUserStats(telegramId));
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р Т‘Р С•Р В±Р В°Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р Т‘Р С•Р В±Р В°Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ');
      return false;
    }
  }, []);

  // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘
  const saveTask = useCallback((task: TaskData): boolean => {
    try {
      const success = databaseService.saveTask(task);
      
      if (success) {
        setTasks(databaseService.getUserTasks(telegramId));
        setStats(databaseService.getUserStats(telegramId));
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘');
      return false;
    }
  }, [telegramId]);

  // Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘
  const updateTask = useCallback((telegramId: string, taskId: string, updates: Partial<TaskData>): boolean => {
    try {
      const tasks = databaseService.getUserTasks(telegramId);
      const taskIndex = tasks.findIndex(t => t.id === taskId);
      
      if (taskIndex === -1) return false;
      
      tasks[taskIndex] = { ...tasks[taskIndex], ...updates };
      const success = databaseService.saveTask(tasks[taskIndex]);
      
      if (success) {
        setTasks(tasks);
        setStats(databaseService.getUserStats(telegramId));
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘');
      return false;
    }
  }, []);

  // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘Р Вµ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ
  const saveNotification = useCallback((notification: NotificationData): boolean => {
    try {
      const success = databaseService.saveNotification(notification);
      
      if (success) {
        setNotifications(databaseService.getUserNotifications(telegramId));
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ');
      return false;
    }
  }, [telegramId]);

  // Р С›РЎвЂљР СР ВµРЎвЂљР С”Р В° РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ Р С”Р В°Р С” Р С—РЎР‚Р С•РЎвЂЎР С‘РЎвЂљР В°Р Р…Р Р…Р С•Р С–Р С•
  const markNotificationAsRead = useCallback((telegramId: string, notificationId: string): boolean => {
    try {
      const success = databaseService.markNotificationAsRead(telegramId, notificationId);
      
      if (success) {
        setNotifications(databaseService.getUserNotifications(telegramId));
      }
      
      return success;
    } catch (err) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ:', err);
      setError('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ');
      return false;
    }
  }, []);

  // Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦
  const refreshData = useCallback(() => {
    loadUserData();
  }, [loadUserData]);

  return {
    user,
    achievements,
    tasks,
    notifications,
    stats,
    isLoading,
    error,
    createUser,
    updateUser,
    updateProgress,
    addAchievement,
    saveTask,
    updateTask,
    saveNotification,
    markNotificationAsRead,
    refreshData
  };
};
