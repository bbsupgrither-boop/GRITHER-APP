# GRITHER - Deployment Setup Guide

## СЂСџС™Р‚ Р В­РЎвЂљР В°Р С—РЎвЂ№ РЎР‚Р В°Р В·Р Р†Р ВµРЎР‚РЎвЂљРЎвЂ№Р Р†Р В°Р Р…Р С‘РЎРЏ

### Р В­РЎвЂљР В°Р С— 1: Р СџР С•Р Т‘Р С–Р С•РЎвЂљР С•Р Р†Р С”Р В° Frontend (Р вЂњР С›Р СћР С›Р вЂ™Р С›)
- РІСљвЂ¦ React Р С—РЎР‚Р С‘Р В»Р С•Р В¶Р ВµР Р…Р С‘Р Вµ Р С–Р С•РЎвЂљР С•Р Р†Р С•
- РІСљвЂ¦ Р вЂ™РЎРѓР Вµ Р С”Р С•Р СР С—Р С•Р Р…Р ВµР Р…РЎвЂљРЎвЂ№ РЎР‚Р В°Р В±Р С•РЎвЂљР В°РЎР‹РЎвЂљ
- РІСљвЂ¦ Р РЋР С‘РЎРѓРЎвЂљР ВµР СР В° РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р в„– Р Р…Р В°РЎРѓРЎвЂљРЎР‚Р С•Р ВµР Р…Р В°
- РІСљвЂ¦ Р С’Р Т‘Р В°Р С—РЎвЂљР С‘Р Р†Р Р…РЎвЂ№Р в„– Р Т‘Р С‘Р В·Р В°Р в„–Р Р…

### Р В­РЎвЂљР В°Р С— 2: Frontend Deployment (Р РЋР вЂўР в„ўР В§Р С’Р РЋ)
```bash
# 1. Р вЂќР ВµР С—Р В»Р С•Р в„– Р Р…Р В° Vercel (РЎР‚Р ВµР С”Р С•Р СР ВµР Р…Р Т‘РЎС“Р ВµРЎвЂљРЎРѓРЎРЏ)
npm install -g vercel
vercel --prod

# 2. Р ВР В»Р С‘ Р Р…Р В° Netlify
npm run build
# Р вЂ”Р В°РЎвЂљР ВµР С Р В·Р В°Р С–РЎР‚РЎС“Р В·Р С‘РЎвЂљРЎРЉ dist/ Р Р…Р В° netlify.com
```

### Р В­РЎвЂљР В°Р С— 3: Telegram Bot Setup
```bash
# Р РЋР С•Р В·Р Т‘Р В°РЎвЂљРЎРЉ Р В±Р С•РЎвЂљР В° РЎвЂЎР ВµРЎР‚Р ВµР В· @BotFather
/newbot
# Р ВР СРЎРЏ: GRITHER Bot
# Username: grither_app_bot

# Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ Bot Token
# Р СњР В°РЎРѓРЎвЂљРЎР‚Р С•Р С‘РЎвЂљРЎРЉ Web App URL Р С—Р С•РЎРѓР В»Р Вµ Р Т‘Р ВµР С—Р В»Р С•РЎРЏ
/setmenubutton
```

### Р В­РЎвЂљР В°Р С— 4: Backend Development
```
Backend Stack:
- Node.js + Express/Fastify
- PostgreSQL (Р С‘Р В»Р С‘ Supabase)
- Telegram Bot API
- JWT Authentication
```

### Р В­РЎвЂљР В°Р С— 5: Database Schema
```sql
-- Users table
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  telegram_id BIGINT UNIQUE NOT NULL,
  username VARCHAR(255),
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  level INTEGER DEFAULT 1,
  experience INTEGER DEFAULT 0,
  balance INTEGER DEFAULT 1000,
  avatar_url TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Р В Р С•РЎРѓРЎвЂљР В°Р В»РЎРЉР Р…РЎвЂ№Р Вµ РЎвЂљР В°Р В±Р В»Р С‘РЎвЂ РЎвЂ№ Р Т‘Р В»РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎ, Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–, Р В±Р В°РЎвЂљРЎвЂљР В»Р С•Р Р†...
```

### Р В­РЎвЂљР В°Р С— 6: CI/CD Pipeline
```yaml
# .github/workflows/deploy.yml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: npm install
      - run: npm run build
      - uses: amondnet/vercel-action@v20
```

## СЂСџвЂєВ РїС‘РЏ Immediate Next Steps

1. **Deploy Current Version**
   - Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ HTTPS URL
   - Р СњР В°РЎРѓРЎвЂљРЎР‚Р С•Р С‘РЎвЂљРЎРЉ Telegram Web App

2. **Create Bot**
   - Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ Bot Token
   - Р СњР В°РЎРѓРЎвЂљРЎР‚Р С•Р С‘РЎвЂљРЎРЉ Р С”Р С•Р СР В°Р Р…Р Т‘РЎвЂ№

3. **Setup Database**
   - Р РЋР С•Р В·Р Т‘Р В°РЎвЂљРЎРЉ Supabase Р С—РЎР‚Р С•Р ВµР С”РЎвЂљ
   - Р СњР В°РЎРѓРЎвЂљРЎР‚Р С•Р С‘РЎвЂљРЎРЉ РЎРѓРЎвЂ¦Р ВµР СРЎС“ Р вЂР вЂќ

4. **Backend API**
   - Р РЋР С•Р В·Р Т‘Р В°РЎвЂљРЎРЉ API endpoints
   - Р ВР Р…РЎвЂљР ВµР С–РЎР‚Р С‘РЎР‚Р С•Р Р†Р В°РЎвЂљРЎРЉ РЎРѓ Telegram

5. **Real-time Updates**
   - WebSockets Р С‘Р В»Р С‘ Server-Sent Events
   - Р РЋР С‘Р Р…РЎвЂ¦РЎР‚Р С•Р Р…Р С‘Р В·Р В°РЎвЂ Р С‘РЎРЏ Р СР ВµР В¶Р Т‘РЎС“ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏР СР С‘

## СЂСџвЂњВ± Telegram Web App Integration

Р СџР С•РЎРѓР В»Р Вµ Р Т‘Р ВµР С—Р В»Р С•РЎРЏ:
```javascript
// Р СџР С•Р В»РЎС“РЎвЂЎР ВµР Р…Р С‘Р Вµ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ Р С‘Р В· Telegram
if (window.Telegram?.WebApp) {
  const tg = window.Telegram.WebApp;
  const user = tg.initDataUnsafe?.user;
  
  // Р С›РЎвЂљР С—РЎР‚Р В°Р Р†Р С‘РЎвЂљРЎРЉ Р Т‘Р В°Р Р…Р Р…РЎвЂ№Р Вµ Р Р…Р В° Р В±РЎРЊР С”Р ВµР Р…Р Т‘ Р Т‘Р В»РЎРЏ Р В°Р Р†РЎвЂљР С•РЎР‚Р С‘Р В·Р В°РЎвЂ Р С‘Р С‘
  fetch('/api/auth/telegram', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      initData: tg.initData,
      user: user
    })
  });
}
```

## СЂСџвЂќвЂћ Development Workflow

Р вЂќР В»РЎРЏ Р В±РЎвЂ№РЎРѓРЎвЂљРЎР‚Р С•Р С–Р С• РЎР‚Р ВµР Т‘Р В°Р С”РЎвЂљР С‘РЎР‚Р С•Р Р†Р В°Р Р…Р С‘РЎРЏ Р В±Р ВµР В· Р С—Р С•Р В»Р Р…Р С•Р в„– Р С—Р ВµРЎР‚Р ВµР В·Р В°Р С–РЎР‚РЎС“Р В·Р С”Р С‘:

1. **Git-based workflow**
   ```bash
   git add .
   git commit -m "Update features"
   git push origin main
   # Auto-deploy via Vercel/Netlify
   ```

2. **Admin Panel** (РЎС“Р В¶Р Вµ Р ВµРЎРѓРЎвЂљРЎРЉ)
   - Р В Р ВµР Т‘Р В°Р С”РЎвЂљР С‘РЎР‚Р С•Р Р†Р В°Р Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎ
   - Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ РЎвЂљР С•Р Р†Р В°РЎР‚Р В°Р СР С‘
   - Р СљР С•Р Т‘Р ВµРЎР‚Р В°РЎвЂ Р С‘РЎРЏ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–

3. **Hot Config**
   - Р С™Р С•Р Р…РЎвЂћР С‘Р С– Р Р† Р вЂР вЂќ Р Р†Р СР ВµРЎРѓРЎвЂљР С• Р С”Р С•Р Т‘Р В°
   - API Р Т‘Р В»РЎРЏ Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ Р Р…Р В°РЎРѓРЎвЂљРЎР‚Р С•Р ВµР С”
   - Realtime Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ РЎвЂЎР ВµРЎР‚Р ВµР В· WebSocket

## СЂСџвЂ™С• Data Migration Plan

localStorage РІвЂ вЂ™ Database:
1. Export current localStorage data
2. Create migration scripts
3. Import to PostgreSQL/Supabase
4. Update API calls
5. Remove localStorage dependencies