# СЂСџвЂќВ§ Backend API Structure Р Т‘Р В»РЎРЏ GRITHER

## Р С›Р В±РЎвЂ°Р В°РЎРЏ Р В°РЎР‚РЎвЂ¦Р С‘РЎвЂљР ВµР С”РЎвЂљРЎС“РЎР‚Р В°

```
Backend (Node.js + Express/Fastify)
РІвЂќСљРІвЂќР‚РІвЂќР‚ Auth (Telegram Web App validation)
РІвЂќСљРІвЂќР‚РІвЂќР‚ Database (PostgreSQL/Supabase)
РІвЂќСљРІвЂќР‚РІвЂќР‚ Real-time (WebSockets/SSE)
РІвЂќвЂќРІвЂќР‚РІвЂќР‚ Telegram Bot API integration
```

## Р С›РЎРѓР Р…Р С•Р Р†Р Р…РЎвЂ№Р Вµ API Endpoints

### СЂСџвЂќС’ Authentication
```
POST /api/auth/telegram
- Р вЂ™Р В°Р В»Р С‘Р Т‘Р В°РЎвЂ Р С‘РЎРЏ initData Р С‘Р В· Telegram
- Р РЋР С•Р В·Р Т‘Р В°Р Р…Р С‘Р Вµ/Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
- Р вЂ™РЎвЂ№Р Т‘Р В°РЎвЂЎР В° JWT РЎвЂљР С•Р С”Р ВµР Р…Р В°
```

### СЂСџвЂВ¤ Users
```
GET    /api/users/me           - Р СџРЎР‚Р С•РЎвЂћР С‘Р В»РЎРЉ РЎвЂљР ВµР С”РЎС“РЎвЂ°Р ВµР С–Р С• Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
PUT    /api/users/me           - Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—РЎР‚Р С•РЎвЂћР С‘Р В»РЎРЏ
GET    /api/users/leaderboard  - Р вЂєР С‘Р Т‘Р ВµРЎР‚Р В±Р С•РЎР‚Р Т‘
GET    /api/users/:id          - Р СџРЎР‚Р С•РЎвЂћР С‘Р В»РЎРЉ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
POST   /api/users/avatar       - Р вЂ”Р В°Р С–РЎР‚РЎС“Р В·Р С”Р В° Р В°Р Р†Р В°РЎвЂљР В°РЎР‚Р В°
```

### СЂСџРЏвЂ  Achievements
```
GET    /api/achievements       - Р РЋР С—Р С‘РЎРѓР С•Р С” Р Р†РЎРѓР ВµРЎвЂ¦ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–
POST   /api/achievements       - Р РЋР С•Р В·Р Т‘Р В°Р Р…Р С‘Р Вµ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ (admin)
PUT    /api/achievements/:id   - Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ (admin)
POST   /api/achievements/:id/unlock - Р В Р В°Р В·Р В±Р В»Р С•Р С”Р С‘РЎР‚Р С•Р Р†Р С”Р В° Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ
GET    /api/users/me/achievements - Р СљР С•Р С‘ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ
```

### СЂСџвЂњвЂ№ Tasks
```
GET    /api/tasks             - Р РЋР С—Р С‘РЎРѓР С•Р С” Р В·Р В°Р Т‘Р В°РЎвЂЎ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
POST   /api/tasks             - Р РЋР С•Р В·Р Т‘Р В°Р Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘ (admin)
PUT    /api/tasks/:id         - Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘ (admin)
POST   /api/tasks/:id/complete - Р вЂ”Р В°Р Р†Р ВµРЎР‚РЎв‚¬Р ВµР Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘
DELETE /api/tasks/:id         - Р Р€Р Т‘Р В°Р В»Р ВµР Р…Р С‘Р Вµ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘ (admin)
```

### РІС™вЂќРїС‘РЏ Battles
```
GET    /api/battles           - Р РЋР С—Р С‘РЎРѓР С•Р С” Р В±Р В°РЎвЂљРЎвЂљР В»Р С•Р Р† Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
POST   /api/battles/invite    - Р С›РЎвЂљР С—РЎР‚Р В°Р Р†Р С”Р В° Р С—РЎР‚Р С‘Р С–Р В»Р В°РЎв‚¬Р ВµР Р…Р С‘РЎРЏ Р Р…Р В° Р В±Р В°РЎвЂљРЎвЂљР В»
POST   /api/battles/:id/accept - Р СџРЎР‚Р С‘Р Р…РЎРЏРЎвЂљР С‘Р Вµ Р С—РЎР‚Р С‘Р С–Р В»Р В°РЎв‚¬Р ВµР Р…Р С‘РЎРЏ
POST   /api/battles/:id/decline - Р С›РЎвЂљР С”Р В»Р С•Р Р…Р ВµР Р…Р С‘Р Вµ Р С—РЎР‚Р С‘Р С–Р В»Р В°РЎв‚¬Р ВµР Р…Р С‘РЎРЏ
POST   /api/battles/:id/complete - Р вЂ”Р В°Р Р†Р ВµРЎР‚РЎв‚¬Р ВµР Р…Р С‘Р Вµ Р В±Р В°РЎвЂљРЎвЂљР В»Р В°
GET    /api/battles/history   - Р ВРЎРѓРЎвЂљР С•РЎР‚Р С‘РЎРЏ Р В±Р В°РЎвЂљРЎвЂљР В»Р С•Р Р†
```

### СЂСџвЂєРЊРїС‘РЏ Shop
```
GET    /api/shop/items        - Р РЋР С—Р С‘РЎРѓР С•Р С” РЎвЂљР С•Р Р†Р В°РЎР‚Р С•Р Р†
POST   /api/shop/items        - Р вЂќР С•Р В±Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ РЎвЂљР С•Р Р†Р В°РЎР‚Р В° (admin)
PUT    /api/shop/items/:id    - Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ РЎвЂљР С•Р Р†Р В°РЎР‚Р В° (admin)
POST   /api/shop/purchase     - Р СџР С•Р С”РЎС“Р С—Р С”Р В° РЎвЂљР С•Р Р†Р В°РЎР‚Р В°
GET    /api/shop/orders       - Р СљР С•Р С‘ Р В·Р В°Р С”Р В°Р В·РЎвЂ№
PUT    /api/shop/orders/:id   - Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ РЎРѓРЎвЂљР В°РЎвЂљРЎС“РЎРѓР В° Р В·Р В°Р С”Р В°Р В·Р В° (admin)
```

### СЂСџвЂњВ¦ Cases
```
GET    /api/cases             - Р РЋР С—Р С‘РЎРѓР С•Р С” Р С”Р ВµР в„–РЎРѓР С•Р Р†
POST   /api/cases             - Р РЋР С•Р В·Р Т‘Р В°Р Р…Р С‘Р Вµ Р С”Р ВµР в„–РЎРѓР В° (admin)
POST   /api/cases/:id/open    - Р С›РЎвЂљР С”РЎР‚РЎвЂ№РЎвЂљР С‘Р Вµ Р С”Р ВµР в„–РЎРѓР В°
GET    /api/cases/history     - Р ВРЎРѓРЎвЂљР С•РЎР‚Р С‘РЎРЏ Р С•РЎвЂљР С”РЎР‚РЎвЂ№РЎвЂљРЎвЂ№РЎвЂ¦ Р С”Р ВµР в„–РЎРѓР С•Р Р†
PUT    /api/cases/:id         - Р С›Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С”Р ВµР в„–РЎРѓР В° (admin)
```

### СЂСџвЂќвЂќ Notifications
```
GET    /api/notifications     - Р РЋР С—Р С‘РЎРѓР С•Р С” РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р в„–
POST   /api/notifications/read - Р СџР С•Р СР ВµРЎвЂљР С”Р В° Р С”Р В°Р С” Р С—РЎР‚Р С•РЎвЂЎР С‘РЎвЂљР В°Р Р…Р С•
DELETE /api/notifications/:id - Р Р€Р Т‘Р В°Р В»Р ВµР Р…Р С‘Р Вµ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ
POST   /api/notifications/send - Р С›РЎвЂљР С—РЎР‚Р В°Р Р†Р С”Р В° РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ (admin)
```

### СЂСџвЂњР‰ Analytics (Admin)
```
GET    /api/admin/stats       - Р С›Р В±РЎвЂ°Р В°РЎРЏ РЎРѓРЎвЂљР В°РЎвЂљР С‘РЎРѓРЎвЂљР С‘Р С”Р В°
GET    /api/admin/users       - Р Р€Р С—РЎР‚Р В°Р Р†Р В»Р ВµР Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏР СР С‘
GET    /api/admin/activity    - Р С’Р С”РЎвЂљР С‘Р Р†Р Р…Р С•РЎРѓРЎвЂљРЎРЉ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»Р ВµР в„–
POST   /api/admin/announcement - Р С›Р В±РЎР‰РЎРЏР Р†Р В»Р ВµР Р…Р С‘Р Вµ Р Т‘Р В»РЎРЏ Р Р†РЎРѓР ВµРЎвЂ¦
```

## Database Schema (PostgreSQL)

### Users
```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  telegram_id BIGINT UNIQUE NOT NULL,
  username VARCHAR(255),
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  avatar_url TEXT,
  level INTEGER DEFAULT 1,
  experience INTEGER DEFAULT 0,
  balance INTEGER DEFAULT 1000,
  rating INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  is_admin BOOLEAN DEFAULT false,
  last_active TIMESTAMP DEFAULT NOW(),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```

### Achievements
```sql
CREATE TABLE achievements (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  icon VARCHAR(255),
  category VARCHAR(100),
  reward INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE user_achievements (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  achievement_id INTEGER REFERENCES achievements(id),
  unlocked_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(user_id, achievement_id)
);
```

### Tasks
```sql
CREATE TABLE tasks (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  assignee_id INTEGER REFERENCES users(id),
  assigner_id INTEGER REFERENCES users(id),
  priority VARCHAR(20) DEFAULT 'medium',
  status VARCHAR(20) DEFAULT 'pending',
  reward INTEGER DEFAULT 0,
  experience INTEGER DEFAULT 0,
  deadline TIMESTAMP,
  completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);
```

### Battles
```sql
CREATE TABLE battles (
  id SERIAL PRIMARY KEY,
  challenger_id INTEGER REFERENCES users(id),
  opponent_id INTEGER REFERENCES users(id),
  stake INTEGER NOT NULL,
  status VARCHAR(20) DEFAULT 'pending',
  winner_id INTEGER REFERENCES users(id),
  started_at TIMESTAMP,
  completed_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);
```

## Real-time Features (WebSockets)

### Р РЋР С•Р В±РЎвЂ№РЎвЂљР С‘РЎРЏ Р Т‘Р В»РЎРЏ real-time Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘Р в„–:
```javascript
// Client Р С—Р С•Р Т‘Р С—Р С‘РЎРѓР С”Р С‘
socket.on('battle_invitation', (data) => {
  // Р СњР С•Р Р†Р С•Р Вµ Р С—РЎР‚Р С‘Р С–Р В»Р В°РЎв‚¬Р ВµР Р…Р С‘Р Вµ Р Р…Р В° Р В±Р В°РЎвЂљРЎвЂљР В»
});

socket.on('achievement_unlocked', (data) => {
  // Р СњР С•Р Р†Р С•Р Вµ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р Вµ РЎР‚Р В°Р В·Р В±Р В»Р С•Р С”Р С‘РЎР‚Р С•Р Р†Р В°Р Р…Р С•
});

socket.on('task_assigned', (data) => {
  // Р СњР С•Р Р†Р В°РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎР В° Р Р…Р В°Р В·Р Р…Р В°РЎвЂЎР ВµР Р…Р В°
});

socket.on('shop_item_added', (data) => {
  // Р СњР С•Р Р†РЎвЂ№Р в„– РЎвЂљР С•Р Р†Р В°РЎР‚ Р Р† Р СР В°Р С–Р В°Р В·Р С‘Р Р…Р Вµ
});

socket.on('notification', (data) => {
  // Р СњР С•Р Р†Р С•Р Вµ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р Вµ
});
```

## Middleware

### Authentication
```javascript
const authenticateToken = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token provided' });
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    req.user = user;
    next();
  });
};
```

### Telegram Init Data Validation
```javascript
const validateTelegramData = (req, res, next) => {
  const { initData } = req.body;
  
  if (!validateTelegramWebAppData(initData, process.env.TELEGRAM_BOT_TOKEN)) {
    return res.status(400).json({ error: 'Invalid Telegram data' });
  }
  
  next();
};
```

## Environment Variables

```env
# Database
DATABASE_URL=postgresql://user:password@localhost:5432/grither
REDIS_URL=redis://localhost:6379

# Telegram
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_WEBHOOK_URL=https://your-api.com/webhook

# JWT
JWT_SECRET=your_jwt_secret
JWT_EXPIRES_IN=7d

# App
NODE_ENV=production
PORT=3000
CORS_ORIGIN=https://your-app.vercel.app

# External APIs
UNSPLASH_ACCESS_KEY=your_unsplash_key
CLOUDINARY_URL=your_cloudinary_url
```

## Deployment Р Т‘Р В»РЎРЏ API

### Railway/Render
```yaml
# railway.toml
[build]
builder = "NIXPACKS"

[deploy]
healthcheckPath = "/health"
healthcheckTimeout = 300
restartPolicyType = "ON_FAILURE"
```

### Vercel Functions (Р В°Р В»РЎРЉРЎвЂљР ВµРЎР‚Р Р…Р В°РЎвЂљР С‘Р Р†Р В°)
```javascript
// api/auth/telegram.js
export default function handler(req, res) {
  if (req.method === 'POST') {
    // Р С›Р В±РЎР‚Р В°Р В±Р С•РЎвЂљР С”Р В° Р В°Р Р†РЎвЂљР С•РЎР‚Р С‘Р В·Р В°РЎвЂ Р С‘Р С‘ РЎвЂЎР ВµРЎР‚Р ВµР В· Telegram
  }
}
```

## Р ВР Р…РЎвЂљР ВµР С–РЎР‚Р В°РЎвЂ Р С‘РЎРЏ РЎРѓ Frontend

```javascript
// utils/api.js
const API_BASE = process.env.VITE_API_URL || 'http://localhost:3000/api';

class ApiService {
  async authenticateWithTelegram(initData) {
    const response = await fetch(`${API_BASE}/auth/telegram`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ initData })
    });
    
    const data = await response.json();
    localStorage.setItem('token', data.token);
    return data;
  }
  
  async getProfile() {
    const token = localStorage.getItem('token');
    const response = await fetch(`${API_BASE}/users/me`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    return response.json();
  }
}
```

Р В­РЎвЂљР С• Р В±Р В°Р В·Р С•Р Р†Р В°РЎРЏ РЎРѓРЎвЂљРЎР‚РЎС“Р С”РЎвЂљРЎС“РЎР‚Р В° Р Т‘Р В»РЎРЏ Р С—Р С•Р В»Р Р…Р С•РЎвЂ Р ВµР Р…Р Р…Р С•Р С–Р С• backend API! СЂСџС™Р‚