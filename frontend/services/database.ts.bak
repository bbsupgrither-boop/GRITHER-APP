// –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ localStorage
// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ë–î

export interface UserData {
  id: string;
  telegramId: string;
  name: string;
  role: 'worker' | 'team_lead' | 'junior_admin' | 'senior_admin' | 'main_admin';
  teamNumber?: number;
  teamName?: string;
  level: number;
  experience: number;
  gCoins: number;
  achievements: string[]; // ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  tasksCompleted: number;
  lastActive: string;
  createdAt: string;
  isActive: boolean;
  achievementsCount: number;
  totalSpent: number;
}

export interface AchievementData {
  id: string;
  userId?: string; // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å undefined
  title: string;
  description: string;
  type: 'tasks' | 'battle' | 'collection' | 'social' | 'special';
  difficulty: 'easy' | 'medium' | 'hard' | 'extreme';
  reward: {
    coins: number;
    experience: number;
    specialItems?: string[];
  };
  icon: string;
  color: string;
  isActive: boolean;
  completionCount: number;
  progress?: number; // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  completed?: boolean; // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  completedAt?: string;
  createdAt: string;
}

export interface TaskData {
  id: string;
  userId: string;
  title: string;
  description: string;
  type: 'development' | 'testing' | 'design' | 'marketing' | 'other';
  priority: 'low' | 'medium' | 'high' | 'critical';
  status: 'new' | 'in_progress' | 'completed' | 'cancelled' | 'overdue';
  assignedTo: string;
  assignedToName: string;
  assignedBy: string;
  deadline: string;
  estimatedTime: number;
  reward: {
    coins: number;
    experience: number;
  };
  progress: number;
  maxProgress: number;
  createdAt: string;
  completedAt?: string;
}

export interface BattleData {
  id: string;
  player1: {
    id: string;
    name: string;
    team: string;
    balance: number;
  };
  player2: {
    id: string;
    name: string;
    team: string;
    balance: number;
  };
  stake: number;
  status: 'active' | 'completed' | 'cancelled' | 'disputed';
  winner?: string;
  createdAt: string;
  completedAt?: string;
  disputeReason?: string;
  proof?: string[];
  totalBets: number;
}

export interface NotificationData {
  id: string;
  userId: string;
  type: string;
  title: string;
  message: string;
  read: boolean;
  createdAt: string;
}

class DatabaseService {
  private readonly DB_VERSION = '1.0';
  private readonly DB_PREFIX = 'grither_db_';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  init() {
    const dbVersion = localStorage.getItem(`${this.DB_PREFIX}version`);
    if (!dbVersion) {
      this.migrateFromOldSystem();
      localStorage.setItem(`${this.DB_PREFIX}version`, this.DB_VERSION);
    }
  }

  // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
  private migrateFromOldSystem() {
    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ mock –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  }

  // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUser(telegramId: string): UserData | null {
    try {
      const userData = localStorage.getItem(`${this.DB_PREFIX}user_${telegramId}`);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  saveUser(userData: UserData): boolean {
    try {
      userData.lastActive = new Date().toISOString();
      localStorage.setItem(`${this.DB_PREFIX}user_${userData.telegramId}`, JSON.stringify(userData));
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return false;
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  createUser(telegramId: string, name: string, role: UserData['role'], teamNumber?: number): UserData {
    const newUser: UserData = {
      telegramId,
      name,
      role,
      teamNumber,
      level: 1,
      experience: 0,
      gCoins: 100, // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã
      achievements: [],
      tasksCompleted: 0,
      lastActive: new Date().toISOString(),
      createdAt: new Date().toISOString()
    };

    this.saveUser(newUser);
    return newUser;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserProgress(telegramId: string, progress: Partial<Pick<UserData, 'level' | 'experience' | 'gCoins' | 'tasksCompleted'>>): boolean {
    const user = this.getUser(telegramId);
    if (!user) return false;

    const updatedUser = {
      ...user,
      ...progress,
      lastActive: new Date().toISOString()
    };

    return this.saveUser(updatedUser);
  }

  // –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addUserAchievement(telegramId: string, achievementId: string): boolean {
    const user = this.getUser(telegramId);
    if (!user) return false;

    if (!user.achievements.includes(achievementId)) {
      user.achievements.push(achievementId);
      user.lastActive = new Date().toISOString();
      return this.saveUser(user);
    }

    return true;
  }

  // === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserAchievements(telegramId: string): AchievementData[] {
    try {
      const achievements = localStorage.getItem(`${this.DB_PREFIX}achievements_${telegramId}`);
      return achievements ? JSON.parse(achievements) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  saveAchievement(achievement: AchievementData): boolean {
    try {
      const existing = this.getUserAchievements(achievement.userId);
      const updated = existing.filter(a => a.id !== achievement.id);
      updated.push(achievement);
      
      localStorage.setItem(`${this.DB_PREFIX}achievements_${achievement.userId}`, JSON.stringify(updated));
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // === –ó–ê–î–ê–ß–ò ===

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserTasks(telegramId: string): TaskData[] {
    try {
      const tasks = localStorage.getItem(`${this.DB_PREFIX}tasks_${telegramId}`);
      return tasks ? JSON.parse(tasks) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
      return [];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
  saveTask(task: TaskData): boolean {
    try {
      const existing = this.getUserTasks(task.userId);
      const updated = existing.filter(t => t.id !== task.id);
      updated.push(task);
      
      localStorage.setItem(`${this.DB_PREFIX}tasks_${task.userId}`, JSON.stringify(updated));
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      return false;
    }
  }

  // === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===

  // –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserNotifications(telegramId: string): NotificationData[] {
    try {
      const notifications = localStorage.getItem(`${this.DB_PREFIX}notifications_${telegramId}`);
      return notifications ? JSON.parse(notifications) : [];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  saveNotification(notification: NotificationData): boolean {
    try {
      const existing = this.getUserNotifications(notification.userId);
      existing.push(notification);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
      const limited = existing.slice(-100);
      
      localStorage.setItem(`${this.DB_PREFIX}notifications_${notification.userId}`, JSON.stringify(limited));
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  markNotificationAsRead(telegramId: string, notificationId: string): boolean {
    try {
      const notifications = this.getUserNotifications(telegramId);
      const notification = notifications.find(n => n.id === notificationId);
      if (notification) {
        notification.read = true;
        localStorage.setItem(`${this.DB_PREFIX}notifications_${telegramId}`, JSON.stringify(notifications));
        return true;
      }
      return false;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // === –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUserStats(telegramId: string) {
    const user = this.getUser(telegramId);
    const achievements = this.getUserAchievements(telegramId);
    const tasks = this.getUserTasks(telegramId);
    const notifications = this.getUserNotifications(telegramId);

    return {
      user,
      achievementsCount: achievements.length,
      completedAchievements: achievements.filter(a => a.completed).length,
      tasksCount: tasks.length,
      completedTasks: tasks.filter(t => t.status === 'completed').length,
      unreadNotifications: notifications.filter(n => !n.read).length
    };
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  clearUserData(telegramId: string): boolean {
    try {
      localStorage.removeItem(`${this.DB_PREFIX}user_${telegramId}`);
      localStorage.removeItem(`${this.DB_PREFIX}achievements_${telegramId}`);
      localStorage.removeItem(`${this.DB_PREFIX}tasks_${telegramId}`);
      localStorage.removeItem(`${this.DB_PREFIX}notifications_${telegramId}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  exportUserData(telegramId: string) {
    return {
      user: this.getUser(telegramId),
      achievements: this.getUserAchievements(telegramId),
      tasks: this.getUserTasks(telegramId),
      notifications: this.getUserNotifications(telegramId),
      stats: this.getUserStats(telegramId)
    };
  }

  // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  importUserData(telegramId: string, data: any): boolean {
    try {
      if (data.user) this.saveUser(data.user);
      if (data.achievements) {
        data.achievements.forEach((achievement: AchievementData) => this.saveAchievement(achievement));
      }
      if (data.tasks) {
        data.tasks.forEach((task: TaskData) => this.saveTask(task));
      }
      if (data.notifications) {
        data.notifications.forEach((notification: NotificationData) => this.saveNotification(notification));
      }
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const databaseService = new DatabaseService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
databaseService.init();
