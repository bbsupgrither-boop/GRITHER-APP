// Р СџРЎР‚Р С•РЎРѓРЎвЂљР В°РЎРЏ РЎРѓР С‘РЎРѓРЎвЂљР ВµР СР В° Р В±Р В°Р В·РЎвЂ№ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р Р…Р В° localStorage
// Р вЂ™ Р В±РЎС“Р Т‘РЎС“РЎвЂ°Р ВµР С Р СР С•Р В¶Р Р…Р С• Р В·Р В°Р СР ВµР Р…Р С‘РЎвЂљРЎРЉ Р Р…Р В° РЎР‚Р ВµР В°Р В»РЎРЉР Р…РЎС“РЎР‹ Р вЂР вЂќ

export interface UserData {
  id: string;
  telegramId: string;
  name: string;
  role: 'worker' | 'team_lead' | 'junior_admin' | 'senior_admin' | 'main_admin';
  teamNumber?: number;
  teamName?: string;
  level: number;
  experience: number;
  gCoins: number;
  achievements: string[]; // ID Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–
  tasksCompleted: number;
  lastActive: string;
  createdAt: string;
  isActive: boolean;
  achievementsCount: number;
  totalSpent: number;
}

export interface AchievementData {
  id: string;
  userId?: string; // Р вЂќР В»РЎРЏ РЎРѓР С‘РЎРѓРЎвЂљР ВµР СР Р…РЎвЂ№РЎвЂ¦ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„– Р СР С•Р В¶Р ВµРЎвЂљ Р В±РЎвЂ№РЎвЂљРЎРЉ undefined
  title: string;
  description: string;
  type: 'tasks' | 'battle' | 'collection' | 'social' | 'special';
  difficulty: 'easy' | 'medium' | 'hard' | 'extreme';
  reward: {
    coins: number;
    experience: number;
    specialItems?: string[];
  };
  icon: string;
  color: string;
  isActive: boolean;
  completionCount: number;
  progress?: number; // Р вЂќР В»РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЉРЎРѓР С”Р С‘РЎвЂ¦ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–
  completed?: boolean; // Р вЂќР В»РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЉРЎРѓР С”Р С‘РЎвЂ¦ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–
  completedAt?: string;
  createdAt: string;
}

export interface TaskData {
  id: string;
  userId: string;
  title: string;
  description: string;
  type: 'development' | 'testing' | 'design' | 'marketing' | 'other';
  priority: 'low' | 'medium' | 'high' | 'critical';
  status: 'new' | 'in_progress' | 'completed' | 'cancelled' | 'overdue';
  assignedTo: string;
  assignedToName: string;
  assignedBy: string;
  deadline: string;
  estimatedTime: number;
  reward: {
    coins: number;
    experience: number;
  };
  progress: number;
  maxProgress: number;
  createdAt: string;
  completedAt?: string;
}

export interface BattleData {
  id: string;
  player1: {
    id: string;
    name: string;
    team: string;
    balance: number;
  };
  player2: {
    id: string;
    name: string;
    team: string;
    balance: number;
  };
  stake: number;
  status: 'active' | 'completed' | 'cancelled' | 'disputed';
  winner?: string;
  createdAt: string;
  completedAt?: string;
  disputeReason?: string;
  proof?: string[];
  totalBets: number;
}

export interface NotificationData {
  id: string;
  userId: string;
  type: string;
  title: string;
  message: string;
  read: boolean;
  createdAt: string;
}

class DatabaseService {
  private readonly DB_VERSION = '1.0';
  private readonly DB_PREFIX = 'grither_db_';

  // Р ВР Р…Р С‘РЎвЂ Р С‘Р В°Р В»Р С‘Р В·Р В°РЎвЂ Р С‘РЎРЏ Р В±Р В°Р В·РЎвЂ№ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦
  init() {
    const dbVersion = localStorage.getItem(`${this.DB_PREFIX}version`);
    if (!dbVersion) {
      this.migrateFromOldSystem();
      localStorage.setItem(`${this.DB_PREFIX}version`, this.DB_VERSION);
    }
  }

  // Р СљР С‘Р С–РЎР‚Р В°РЎвЂ Р С‘РЎРЏ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С‘Р В· РЎРѓРЎвЂљР В°РЎР‚Р С•Р в„– РЎРѓР С‘РЎРѓРЎвЂљР ВµР СРЎвЂ№
  private migrateFromOldSystem() {
    console.log('СЂСџвЂќвЂћ Р СљР С‘Р С–РЎР‚Р В°РЎвЂ Р С‘РЎРЏ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С‘Р В· РЎРѓРЎвЂљР В°РЎР‚Р С•Р в„– РЎРѓР С‘РЎРѓРЎвЂљР ВµР СРЎвЂ№...');
    
    // Р вЂ”Р Т‘Р ВµРЎРѓРЎРЉ Р СР С•Р В¶Р Р…Р С• Р Т‘Р С•Р В±Р В°Р Р†Р С‘РЎвЂљРЎРЉ Р В»Р С•Р С–Р С‘Р С”РЎС“ Р СР С‘Р С–РЎР‚Р В°РЎвЂ Р С‘Р С‘ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦
    // Р СњР В°Р С—РЎР‚Р С‘Р СР ВµРЎР‚, Р С—Р ВµРЎР‚Р ВµР Р…Р С•РЎРѓ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С‘Р В· mock Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р Р† Р Р…Р С•Р Р†РЎС“РЎР‹ РЎРѓРЎвЂљРЎР‚РЎС“Р С”РЎвЂљРЎС“РЎР‚РЎС“
  }

  // === Р СџР С›Р вЂєР В¬Р вЂ”Р С›Р вЂ™Р С’Р СћР вЂўР вЂєР В ===

  // Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ Р Т‘Р В°Р Р…Р Р…РЎвЂ№Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  getUser(telegramId: string): UserData | null {
    try {
      const userData = localStorage.getItem(`${this.DB_PREFIX}user_${telegramId}`);
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С—Р С•Р В»РЎС“РЎвЂЎР ВµР Р…Р С‘РЎРЏ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ:', error);
      return null;
    }
  }

  // Р РЋР С•Р В·Р Т‘Р В°РЎвЂљРЎРЉ Р С‘Р В»Р С‘ Р С•Р В±Р Р…Р С•Р Р†Р С‘РЎвЂљРЎРЉ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  saveUser(userData: UserData): boolean {
    try {
      userData.lastActive = new Date().toISOString();
      localStorage.setItem(`${this.DB_PREFIX}user_${userData.telegramId}`, JSON.stringify(userData));
      return true;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ:', error);
      return false;
    }
  }

  // Р РЋР С•Р В·Р Т‘Р В°РЎвЂљРЎРЉ Р Р…Р С•Р Р†Р С•Р С–Р С• Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  createUser(telegramId: string, name: string, role: UserData['role'], teamNumber?: number): UserData {
    const newUser: UserData = {
      telegramId,
      name,
      role,
      teamNumber,
      level: 1,
      experience: 0,
      gCoins: 100, // Р РЋРЎвЂљР В°РЎР‚РЎвЂљР С•Р Р†РЎвЂ№Р Вµ Р СР С•Р Р…Р ВµРЎвЂљРЎвЂ№
      achievements: [],
      tasksCompleted: 0,
      lastActive: new Date().toISOString(),
      createdAt: new Date().toISOString()
    };

    this.saveUser(newUser);
    return newUser;
  }

  // Р С›Р В±Р Р…Р С•Р Р†Р С‘РЎвЂљРЎРЉ Р С—РЎР‚Р С•Р С–РЎР‚Р ВµРЎРѓРЎРѓ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  updateUserProgress(telegramId: string, progress: Partial<Pick<UserData, 'level' | 'experience' | 'gCoins' | 'tasksCompleted'>>): boolean {
    const user = this.getUser(telegramId);
    if (!user) return false;

    const updatedUser = {
      ...user,
      ...progress,
      lastActive: new Date().toISOString()
    };

    return this.saveUser(updatedUser);
  }

  // Р вЂќР С•Р В±Р В°Р Р†Р С‘РЎвЂљРЎРЉ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎР‹
  addUserAchievement(telegramId: string, achievementId: string): boolean {
    const user = this.getUser(telegramId);
    if (!user) return false;

    if (!user.achievements.includes(achievementId)) {
      user.achievements.push(achievementId);
      user.lastActive = new Date().toISOString();
      return this.saveUser(user);
    }

    return true;
  }

  // === Р вЂќР С›Р РЋР СћР ВР вЂ“Р вЂўР СњР ВР Р‡ ===

  // Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  getUserAchievements(telegramId: string): AchievementData[] {
    try {
      const achievements = localStorage.getItem(`${this.DB_PREFIX}achievements_${telegramId}`);
      return achievements ? JSON.parse(achievements) : [];
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С—Р С•Р В»РЎС“РЎвЂЎР ВµР Р…Р С‘РЎРЏ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р в„–:', error);
      return [];
    }
  }

  // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…Р С‘РЎвЂљРЎРЉ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘Р Вµ
  saveAchievement(achievement: AchievementData): boolean {
    try {
      const existing = this.getUserAchievements(achievement.userId);
      const updated = existing.filter(a => a.id !== achievement.id);
      updated.push(achievement);
      
      localStorage.setItem(`${this.DB_PREFIX}achievements_${achievement.userId}`, JSON.stringify(updated));
      return true;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ Р Т‘Р С•РЎРѓРЎвЂљР С‘Р В¶Р ВµР Р…Р С‘РЎРЏ:', error);
      return false;
    }
  }

  // === Р вЂ”Р С’Р вЂќР С’Р В§Р В ===

  // Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  getUserTasks(telegramId: string): TaskData[] {
    try {
      const tasks = localStorage.getItem(`${this.DB_PREFIX}tasks_${telegramId}`);
      return tasks ? JSON.parse(tasks) : [];
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С—Р С•Р В»РЎС“РЎвЂЎР ВµР Р…Р С‘РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎ:', error);
      return [];
    }
  }

  // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…Р С‘РЎвЂљРЎРЉ Р В·Р В°Р Т‘Р В°РЎвЂЎРЎС“
  saveTask(task: TaskData): boolean {
    try {
      const existing = this.getUserTasks(task.userId);
      const updated = existing.filter(t => t.id !== task.id);
      updated.push(task);
      
      localStorage.setItem(`${this.DB_PREFIX}tasks_${task.userId}`, JSON.stringify(updated));
      return true;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ Р В·Р В°Р Т‘Р В°РЎвЂЎР С‘:', error);
      return false;
    }
  }

  // === Р Р€Р вЂ™Р вЂўР вЂќР С›Р СљР вЂєР вЂўР СњР ВР Р‡ ===

  // Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  getUserNotifications(telegramId: string): NotificationData[] {
    try {
      const notifications = localStorage.getItem(`${this.DB_PREFIX}notifications_${telegramId}`);
      return notifications ? JSON.parse(notifications) : [];
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С—Р С•Р В»РЎС“РЎвЂЎР ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р в„–:', error);
      return [];
    }
  }

  // Р РЋР С•РЎвЂ¦РЎР‚Р В°Р Р…Р С‘РЎвЂљРЎРЉ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р Вµ
  saveNotification(notification: NotificationData): boolean {
    try {
      const existing = this.getUserNotifications(notification.userId);
      existing.push(notification);
      
      // Р С›Р С–РЎР‚Р В°Р Р…Р С‘РЎвЂЎР С‘Р Р†Р В°Р ВµР С Р С”Р С•Р В»Р С‘РЎвЂЎР ВµРЎРѓРЎвЂљР Р†Р С• РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р в„– (Р С—Р С•РЎРѓР В»Р ВµР Т‘Р Р…Р С‘Р Вµ 100)
      const limited = existing.slice(-100);
      
      localStorage.setItem(`${this.DB_PREFIX}notifications_${notification.userId}`, JSON.stringify(limited));
      return true;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° РЎРѓР С•РЎвЂ¦РЎР‚Р В°Р Р…Р ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ:', error);
      return false;
    }
  }

  // Р С›РЎвЂљР СР ВµРЎвЂљР С‘РЎвЂљРЎРЉ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘Р Вµ Р С”Р В°Р С” Р С—РЎР‚Р С•РЎвЂЎР С‘РЎвЂљР В°Р Р…Р Р…Р С•Р Вµ
  markNotificationAsRead(telegramId: string, notificationId: string): boolean {
    try {
      const notifications = this.getUserNotifications(telegramId);
      const notification = notifications.find(n => n.id === notificationId);
      if (notification) {
        notification.read = true;
        localStorage.setItem(`${this.DB_PREFIX}notifications_${telegramId}`, JSON.stringify(notifications));
        return true;
      }
      return false;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•Р В±Р Р…Р С•Р Р†Р В»Р ВµР Р…Р С‘РЎРЏ РЎС“Р Р†Р ВµР Т‘Р С•Р СР В»Р ВµР Р…Р С‘РЎРЏ:', error);
      return false;
    }
  }

  // === Р РЋР ВР РЋР СћР вЂўР СљР СњР В«Р вЂў Р В¤Р Р€Р СњР С™Р В¦Р ВР В ===

  // Р СџР С•Р В»РЎС“РЎвЂЎР С‘РЎвЂљРЎРЉ РЎРѓРЎвЂљР В°РЎвЂљР С‘РЎРѓРЎвЂљР С‘Р С”РЎС“ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  getUserStats(telegramId: string) {
    const user = this.getUser(telegramId);
    const achievements = this.getUserAchievements(telegramId);
    const tasks = this.getUserTasks(telegramId);
    const notifications = this.getUserNotifications(telegramId);

    return {
      user,
      achievementsCount: achievements.length,
      completedAchievements: achievements.filter(a => a.completed).length,
      tasksCount: tasks.length,
      completedTasks: tasks.filter(t => t.status === 'completed').length,
      unreadNotifications: notifications.filter(n => !n.read).length
    };
  }

  // Р С›РЎвЂЎР С‘РЎРѓРЎвЂљР С‘РЎвЂљРЎРЉ Р Р†РЎРѓР Вµ Р Т‘Р В°Р Р…Р Р…РЎвЂ№Р Вµ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ (Р Т‘Р В»РЎРЏ РЎвЂљР ВµРЎРѓРЎвЂљР С‘РЎР‚Р С•Р Р†Р В°Р Р…Р С‘РЎРЏ)
  clearUserData(telegramId: string): boolean {
    try {
      localStorage.removeItem(`${this.DB_PREFIX}user_${telegramId}`);
      localStorage.removeItem(`${this.DB_PREFIX}achievements_${telegramId}`);
      localStorage.removeItem(`${this.DB_PREFIX}tasks_${telegramId}`);
      localStorage.removeItem(`${this.DB_PREFIX}notifications_${telegramId}`);
      return true;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С•РЎвЂЎР С‘РЎРѓРЎвЂљР С”Р С‘ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦:', error);
      return false;
    }
  }

  // Р В­Р С”РЎРѓР С—Р С•РЎР‚РЎвЂљ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  exportUserData(telegramId: string) {
    return {
      user: this.getUser(telegramId),
      achievements: this.getUserAchievements(telegramId),
      tasks: this.getUserTasks(telegramId),
      notifications: this.getUserNotifications(telegramId),
      stats: this.getUserStats(telegramId)
    };
  }

  // Р ВР СР С—Р С•РЎР‚РЎвЂљ Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦ Р С—Р С•Р В»РЎРЉР В·Р С•Р Р†Р В°РЎвЂљР ВµР В»РЎРЏ
  importUserData(telegramId: string, data: any): boolean {
    try {
      if (data.user) this.saveUser(data.user);
      if (data.achievements) {
        data.achievements.forEach((achievement: AchievementData) => this.saveAchievement(achievement));
      }
      if (data.tasks) {
        data.tasks.forEach((task: TaskData) => this.saveTask(task));
      }
      if (data.notifications) {
        data.notifications.forEach((notification: NotificationData) => this.saveNotification(notification));
      }
      return true;
    } catch (error) {
      console.error('Р С›РЎв‚¬Р С‘Р В±Р С”Р В° Р С‘Р СР С—Р С•РЎР‚РЎвЂљР В° Р Т‘Р В°Р Р…Р Р…РЎвЂ№РЎвЂ¦:', error);
      return false;
    }
  }
}

// Р РЋР С•Р В·Р Т‘Р В°Р ВµР С Р ВµР Т‘Р С‘Р Р…РЎРѓРЎвЂљР Р†Р ВµР Р…Р Р…РЎвЂ№Р в„– РЎРЊР С”Р В·Р ВµР СР С—Р В»РЎРЏРЎР‚ РЎРѓР ВµРЎР‚Р Р†Р С‘РЎРѓР В°
export const databaseService = new DatabaseService();

// Р ВР Р…Р С‘РЎвЂ Р С‘Р В°Р В»Р С‘Р В·Р С‘РЎР‚РЎС“Р ВµР С Р вЂР вЂќ Р С—РЎР‚Р С‘ Р С‘Р СР С—Р С•РЎР‚РЎвЂљР Вµ
databaseService.init();
