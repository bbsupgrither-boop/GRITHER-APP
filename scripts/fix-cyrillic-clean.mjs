import { promises as fs } from 'fs';
import { glob } from 'glob';
import iconv from 'iconv-lite';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∞–∫–æ–∑—è–±—Ä
function hasCyrillicGarbled(text) {
  return /–† –í –†'–í/g.test(text) || 
         /–†–é–°—ô/g.test(text) || 
         /–†–Ü–†‚Äö–°—ö/g.test(text) ||
         /–† –†–ã–†/g.test(text) ||
         /–† –°‚Äî–†'–í¬ª–†–é–≤–Ç"import/g.test(text);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function fixCyrillicText(text) {
  let fixed = text;
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø–æ—Ä—á–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  const brokenImport = '–† –°‚Äî–†'–í¬ª–†–é–≤–Ç"import';
  if (fixed.includes(brokenImport)) {
    fixed = fixed.replace(brokenImport, 'import');
  }
  
  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É
  if (hasCyrillicGarbled(fixed)) {
    try {
      const recoded = iconv.decode(iconv.encode(fixed, 'win1251'), 'utf8');
      const originalCyrillic = (fixed.match(/[–ê-–Ø–∞-—è–Å—ë]/g) || []).length;
      const recodedCyrillic = (recoded.match(/[–ê-–Ø–∞-—è–Å—ë]/g) || []).length;
      
      if (recodedCyrillic > originalCyrillic) {
        fixed = recoded;
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏:', error.message);
    }
  }
  
  return fixed;
}

async function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞–∫–æ–∑—è–±—Ä...');
  
  const files = await glob('**/*.{ts,tsx,js,jsx,html,css,json,md}', {
    ignore: ['**/node_modules/**', '**/dist/**', '**/.git/**'],
    nodir: true
  });
  
  let fixedCount = 0;
  
  for (const file of files) {
    try {
      const content = await fs.readFile(file, 'utf8');
      
      if (hasCyrillicGarbled(content)) {
        const fixed = fixCyrillicText(content);
        
        if (fixed !== content) {
          await fs.writeFile(file, fixed, 'utf8');
          console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${file}`);
          fixedCount++;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ ${file}:`, error.message);
    }
  }
  
  console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedCount}`);
}

main().catch(console.error);
