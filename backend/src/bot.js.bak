// src/bot.js
import { Telegraf } from "telegraf";
import { supabase } from "./db.js";

// === Р ВР СњР ВР В¦Р ВР С’Р вЂєР ВР вЂ”Р С’Р В¦Р ВР Р‡ Р вЂР С›Р СћР С’ ===
const token = process.env.BOT_TOKEN;
if (!token) throw new Error("BOT_TOKEN is missing");
export const bot = new Telegraf(token);

// === Р ТђР вЂўР вЂєР СџР вЂўР В : Р СџР В Р С›Р вЂ™Р вЂўР В Р С™Р С’ Р С’Р вЂќР СљР ВР СњР С’ ===
async function isAdmin(userId) {
  const { data, error } = await supabase
    .from("admins")
    .select("user_id")
    .eq("user_id", userId)
    .limit(1);
  if (error) {
    console.error("[admins select] error:", error.message);
    return false;
  }
  return Array.isArray(data) && data.length === 1;
}

// === Р вЂєР С›Р вЂњ Р вЂ™Р РЋР вЂўР Тђ Р СћР вЂўР С™Р РЋР СћР С›Р вЂ™Р В«Р Тђ Р РЋР С›Р С›Р вЂР В©Р вЂўР СњР ВР в„ў (Р Т‘Р В»РЎРЏ Р Т‘Р С‘Р В°Р С–Р Р…Р С•РЎРѓРЎвЂљР С‘Р С”Р С‘) ===
bot.on("text", async (ctx, next) => {
  try {
    console.log("[text]", ctx.message?.text, "from", ctx.from?.id);
  } catch {}
  return next();
});

// === Р РЋР СћР С’Р В Р Сћ ===
bot.start(async (ctx) => {
  const webAppUrl = 'https://bright-tiramisu-4df5d7.netlify.app/?v=5';
  await ctx.reply('Р С›РЎвЂљР С”РЎР‚РЎвЂ№РЎвЂљРЎРЉ Р С—РЎР‚Р С‘Р В»Р С•Р В¶Р ВµР Р…Р С‘Р Вµ СЂСџвЂвЂЎ', {
    reply_markup: {
      keyboard: [[{ text: 'Р С›РЎвЂљР С”РЎР‚РЎвЂ№РЎвЂљРЎРЉ GRITHER', web_app: { url: webAppUrl } }]],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
});

// === Р СџР С›Р СљР С›Р В©Р В¬ ===
bot.command("help", async (ctx) => {
  await ctx.reply(
    [
      "Р С™Р С•Р СР В°Р Р…Р Т‘РЎвЂ№:",
      "/ping РІР‚вЂќ Р С—РЎР‚Р С•Р Р†Р ВµРЎР‚Р С”Р В° РЎРѓР Р†РЎРЏР В·Р С‘",
      "/admin РІР‚вЂќ Р С—РЎР‚Р С•Р Р†Р ВµРЎР‚Р С‘РЎвЂљРЎРЉ Р С—РЎР‚Р В°Р Р†Р В°",
      "/list РІР‚вЂќ РЎРѓР С—Р С‘РЎРѓР С•Р С” Р С”Р С•Р Р…РЎвЂљР ВµР Р…РЎвЂљ-Р В±Р В»Р С•Р С”Р С•Р Р† (Р В°Р Т‘Р СР С‘Р Р…)",
      "/get <slug> РІР‚вЂќ Р С—Р С•Р С”Р В°Р В·Р В°РЎвЂљРЎРЉ Р В±Р В»Р С•Р С” Р С”Р С•Р Р…РЎвЂљР ВµР Р…РЎвЂљР В°",
      "/set <slug>|Р вЂ”Р В°Р С–Р С•Р В»Р С•Р Р†Р С•Р С”|Р СћР ВµР С”РЎРѓРЎвЂљ РІР‚вЂќ РЎРѓР С•Р В·Р Т‘Р В°РЎвЂљРЎРЉ/Р С•Р В±Р Р…Р С•Р Р†Р С‘РЎвЂљРЎРЉ Р В±Р В»Р С•Р С” (Р В°Р Т‘Р СР С‘Р Р…)",
    ].join("\n")
  );
});

// === PING ===
bot.command("ping", async (ctx) => {
  await ctx.reply("pong");
});

// === Р СџР В Р С›Р вЂ™Р вЂўР В Р С™Р С’ Р С’Р вЂќР СљР ВР СњР С’ ===
bot.command("admin", async (ctx) => {
  const ok = await isAdmin(ctx.from.id);
  await ctx.reply(ok ? "Р СћРЎвЂ№ Р В°Р Т‘Р СР С‘Р Р… РІСљвЂ¦" : "Р СњР ВµРЎвЂљ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В° РІСњРЉ");
});

// === Р РЋР СџР ВР РЋР С›Р С™ Р вЂР вЂєР С›Р С™Р С›Р вЂ™ (Р С’Р вЂќР СљР ВР Сњ) ===
bot.command("list", async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    await ctx.reply("Р СњР ВµРЎвЂљ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В° РІСњРЉ");
    return;
  }
  const { data, error } = await supabase
    .from("content_blocks")
    .select("slug,title,updated_at")
    .order("updated_at", { ascending: false })
    .limit(30);

  if (error) {
    await ctx.reply("Р С›РЎв‚¬Р С‘Р В±Р С”Р В°: " + error.message);
    return;
  }
  if (!data || data.length === 0) {
    await ctx.reply("Р СџРЎС“РЎРѓРЎвЂљР С•");
    return;
  }
  await ctx.reply(data.map((r) => `РІР‚Сћ ${r.slug} РІР‚вЂќ ${r.title}`).join("\n"));
});

// === Р СџР С›Р вЂєР Р€Р В§Р ВР СћР В¬ Р С™Р С›Р СњР СћР вЂўР СњР Сћ: /get about ===
bot.command("get", async (ctx) => {
  const txt = ctx.message?.text || "";
  // Р С—Р С•Р Т‘Р Т‘Р ВµРЎР‚Р В¶Р С‘Р С /get Р С‘ /get@Р С‘Р СРЎРЏР В±Р С•РЎвЂљР В°
  const payload = txt.replace(/^\/get(@\S+)?\s*/i, "");
  const slug = payload.trim();
  if (!slug) {
    await ctx.reply("Р В¤Р С•РЎР‚Р СР В°РЎвЂљ: /get slug");
    return;
  }

  const { data, error } = await supabase
    .from("content_blocks")
    .select("*")
    .eq("slug", slug)
    .single();

  if (error || !data) {
    await ctx.reply("Р СњР Вµ Р Р…Р В°Р в„–Р Т‘Р ВµР Р…Р С•");
    return;
  }
  await ctx.reply(`*${data.title}*\n\n${data.body}`, { parse_mode: "Markdown" });
});

// === Р РЋР С›Р вЂ”Р вЂќР С’Р СћР В¬/Р С›Р вЂР СњР С›Р вЂ™Р ВР СћР В¬ Р С™Р С›Р СњР СћР вЂўР СњР Сћ: /set about|Р вЂ”Р В°Р С–Р С•Р В»Р С•Р Р†Р С•Р С”|Р СћР ВµР С”РЎРѓРЎвЂљ ===
bot.command("set", async (ctx) => {
  if (!(await isAdmin(ctx.from.id))) {
    await ctx.reply("Р СњР ВµРЎвЂљ Р Т‘Р С•РЎРѓРЎвЂљРЎС“Р С—Р В° РІСњРЉ");
    return;
  }

  const txt = ctx.message?.text || "";
  // Р С—Р С•Р Т‘Р Т‘Р ВµРЎР‚Р В¶Р С‘Р С /set Р С‘ /set@Р С‘Р СРЎРЏР В±Р С•РЎвЂљР В°
  const payload = txt.replace(/^\/set(@\S+)?\s*/i, "");
  const parts = payload.split("|");
  const slug = (parts[0] || "").trim();
  const title = (parts[1] || "").trim();
  const body = parts.slice(2).join("|").trim();

  if (!slug || !title || !body) {
    await ctx.reply("Р В¤Р С•РЎР‚Р СР В°РЎвЂљ: /set slug|Р вЂ”Р В°Р С–Р С•Р В»Р С•Р Р†Р С•Р С”|Р СћР ВµР С”РЎРѓРЎвЂљ");
    return;
  }

  const { data, error } = await supabase
    .from("content_blocks")
    .upsert({
      slug,
      title,
      body,
      updated_by: String(ctx.from.id),
    })
    .select()
    .single();

  if (error) {
    await ctx.reply("Р С›РЎв‚¬Р С‘Р В±Р С”Р В°: " + error.message);
    return;
  }

  console.log("[content_updated]", { slug, by: ctx.from.id });
  await ctx.reply(`OK: ${data.slug} Р С•Р В±Р Р…Р С•Р Р†Р В»РЎвЂР Р…`);
});

// === Р В­Р С™Р РЋР СџР С›Р В Р Сћ Р вЂ™Р вЂўР вЂР ТђР Р€Р С™Р С’ ===
export const webhookCallback = bot.webhookCallback("/");
